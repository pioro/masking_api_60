# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Domain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'created_by': 'str',
        'default_algorithm_code': 'str',
        'default_tokenization_code': 'str'
    }

    attribute_map = {
        'domain_name': 'domainName',
        'created_by': 'createdBy',
        'default_algorithm_code': 'defaultAlgorithmCode',
        'default_tokenization_code': 'defaultTokenizationCode'
    }

    def __init__(self, domain_name=None, created_by=None, default_algorithm_code=None, default_tokenization_code=None):  # noqa: E501
        """Domain - a model defined in Swagger"""  # noqa: E501

        self._domain_name = None
        self._created_by = None
        self._default_algorithm_code = None
        self._default_tokenization_code = None
        self.discriminator = None

        self.domain_name = domain_name
        if created_by is not None:
            self.created_by = created_by
        self.default_algorithm_code = default_algorithm_code
        if default_tokenization_code is not None:
            self.default_tokenization_code = default_tokenization_code

    @property
    def domain_name(self):
        """Gets the domain_name of this Domain.  # noqa: E501


        :return: The domain_name of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Domain.


        :param domain_name: The domain_name of this Domain.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501
        if domain_name is not None and len(domain_name) > 20:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `20`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def created_by(self):
        """Gets the created_by of this Domain.  # noqa: E501

        Backend generated field  # noqa: E501

        :return: The created_by of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Domain.

        Backend generated field  # noqa: E501

        :param created_by: The created_by of this Domain.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 255:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `255`")  # noqa: E501

        self._created_by = created_by

    @property
    def default_algorithm_code(self):
        """Gets the default_algorithm_code of this Domain.  # noqa: E501

        Must be one of the algorithm codes  # noqa: E501

        :return: The default_algorithm_code of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._default_algorithm_code

    @default_algorithm_code.setter
    def default_algorithm_code(self, default_algorithm_code):
        """Sets the default_algorithm_code of this Domain.

        Must be one of the algorithm codes  # noqa: E501

        :param default_algorithm_code: The default_algorithm_code of this Domain.  # noqa: E501
        :type: str
        """
        if default_algorithm_code is None:
            raise ValueError("Invalid value for `default_algorithm_code`, must not be `None`")  # noqa: E501
        if default_algorithm_code is not None and len(default_algorithm_code) > 500:
            raise ValueError("Invalid value for `default_algorithm_code`, length must be less than or equal to `500`")  # noqa: E501

        self._default_algorithm_code = default_algorithm_code

    @property
    def default_tokenization_code(self):
        """Gets the default_tokenization_code of this Domain.  # noqa: E501

        This input is optional. If used, must be one of the tokenization algorithm codes  # noqa: E501

        :return: The default_tokenization_code of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._default_tokenization_code

    @default_tokenization_code.setter
    def default_tokenization_code(self, default_tokenization_code):
        """Sets the default_tokenization_code of this Domain.

        This input is optional. If used, must be one of the tokenization algorithm codes  # noqa: E501

        :param default_tokenization_code: The default_tokenization_code of this Domain.  # noqa: E501
        :type: str
        """
        if default_tokenization_code is not None and len(default_tokenization_code) > 500:
            raise ValueError("Invalid value for `default_tokenization_code`, length must be less than or equal to `500`")  # noqa: E501

        self._default_tokenization_code = default_tokenization_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Domain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
