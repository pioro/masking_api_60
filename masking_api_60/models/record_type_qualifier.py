# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecordTypeQualifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_type_qualifier_id': 'int',
        'record_type_id': 'int',
        'pattern': 'str',
        'file_field_metadata_id': 'int'
    }

    attribute_map = {
        'record_type_qualifier_id': 'recordTypeQualifierId',
        'record_type_id': 'recordTypeId',
        'pattern': 'pattern',
        'file_field_metadata_id': 'fileFieldMetadataId'
    }

    def __init__(self, record_type_qualifier_id=None, record_type_id=None, pattern=None, file_field_metadata_id=None):  # noqa: E501
        """RecordTypeQualifier - a model defined in Swagger"""  # noqa: E501

        self._record_type_qualifier_id = None
        self._record_type_id = None
        self._pattern = None
        self._file_field_metadata_id = None
        self.discriminator = None

        if record_type_qualifier_id is not None:
            self.record_type_qualifier_id = record_type_qualifier_id
        if record_type_id is not None:
            self.record_type_id = record_type_id
        if pattern is not None:
            self.pattern = pattern
        if file_field_metadata_id is not None:
            self.file_field_metadata_id = file_field_metadata_id

    @property
    def record_type_qualifier_id(self):
        """Gets the record_type_qualifier_id of this RecordTypeQualifier.  # noqa: E501

        The ID number of the record type qualifier. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The record_type_qualifier_id of this RecordTypeQualifier.  # noqa: E501
        :rtype: int
        """
        return self._record_type_qualifier_id

    @record_type_qualifier_id.setter
    def record_type_qualifier_id(self, record_type_qualifier_id):
        """Sets the record_type_qualifier_id of this RecordTypeQualifier.

        The ID number of the record type qualifier. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param record_type_qualifier_id: The record_type_qualifier_id of this RecordTypeQualifier.  # noqa: E501
        :type: int
        """

        self._record_type_qualifier_id = record_type_qualifier_id

    @property
    def record_type_id(self):
        """Gets the record_type_id of this RecordTypeQualifier.  # noqa: E501

        The ID number of the record type that the record type qualifier refers to.  # noqa: E501

        :return: The record_type_id of this RecordTypeQualifier.  # noqa: E501
        :rtype: int
        """
        return self._record_type_id

    @record_type_id.setter
    def record_type_id(self, record_type_id):
        """Sets the record_type_id of this RecordTypeQualifier.

        The ID number of the record type that the record type qualifier refers to.  # noqa: E501

        :param record_type_id: The record_type_id of this RecordTypeQualifier.  # noqa: E501
        :type: int
        """

        self._record_type_id = record_type_id

    @property
    def pattern(self):
        """Gets the pattern of this RecordTypeQualifier.  # noqa: E501

        The pattern to match against the record type field.  # noqa: E501

        :return: The pattern of this RecordTypeQualifier.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this RecordTypeQualifier.

        The pattern to match against the record type field.  # noqa: E501

        :param pattern: The pattern of this RecordTypeQualifier.  # noqa: E501
        :type: str
        """
        if pattern is not None and len(pattern) > 255:
            raise ValueError("Invalid value for `pattern`, length must be less than or equal to `255`")  # noqa: E501

        self._pattern = pattern

    @property
    def file_field_metadata_id(self):
        """Gets the file_field_metadata_id of this RecordTypeQualifier.  # noqa: E501

        The ID of the record type field the record type qualifier refers to.  # noqa: E501

        :return: The file_field_metadata_id of this RecordTypeQualifier.  # noqa: E501
        :rtype: int
        """
        return self._file_field_metadata_id

    @file_field_metadata_id.setter
    def file_field_metadata_id(self, file_field_metadata_id):
        """Sets the file_field_metadata_id of this RecordTypeQualifier.

        The ID of the record type field the record type qualifier refers to.  # noqa: E501

        :param file_field_metadata_id: The file_field_metadata_id of this RecordTypeQualifier.  # noqa: E501
        :type: int
        """

        self._file_field_metadata_id = file_field_metadata_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordTypeQualifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordTypeQualifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
