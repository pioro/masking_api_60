# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DatabaseRuleset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_ruleset_id': 'int',
        'ruleset_name': 'str',
        'database_connector_id': 'int',
        'refresh_drops_tables': 'bool'
    }

    attribute_map = {
        'database_ruleset_id': 'databaseRulesetId',
        'ruleset_name': 'rulesetName',
        'database_connector_id': 'databaseConnectorId',
        'refresh_drops_tables': 'refreshDropsTables'
    }

    def __init__(self, database_ruleset_id=None, ruleset_name=None, database_connector_id=None, refresh_drops_tables=False):  # noqa: E501
        """DatabaseRuleset - a model defined in Swagger"""  # noqa: E501

        self._database_ruleset_id = None
        self._ruleset_name = None
        self._database_connector_id = None
        self._refresh_drops_tables = None
        self.discriminator = None

        if database_ruleset_id is not None:
            self.database_ruleset_id = database_ruleset_id
        self.ruleset_name = ruleset_name
        self.database_connector_id = database_connector_id
        if refresh_drops_tables is not None:
            self.refresh_drops_tables = refresh_drops_tables

    @property
    def database_ruleset_id(self):
        """Gets the database_ruleset_id of this DatabaseRuleset.  # noqa: E501

        The ID of the database ruleset. This field is set by the Masking Engine.  # noqa: E501

        :return: The database_ruleset_id of this DatabaseRuleset.  # noqa: E501
        :rtype: int
        """
        return self._database_ruleset_id

    @database_ruleset_id.setter
    def database_ruleset_id(self, database_ruleset_id):
        """Sets the database_ruleset_id of this DatabaseRuleset.

        The ID of the database ruleset. This field is set by the Masking Engine.  # noqa: E501

        :param database_ruleset_id: The database_ruleset_id of this DatabaseRuleset.  # noqa: E501
        :type: int
        """

        self._database_ruleset_id = database_ruleset_id

    @property
    def ruleset_name(self):
        """Gets the ruleset_name of this DatabaseRuleset.  # noqa: E501

        The name of the ruleset. This must be unique within an environment.  # noqa: E501

        :return: The ruleset_name of this DatabaseRuleset.  # noqa: E501
        :rtype: str
        """
        return self._ruleset_name

    @ruleset_name.setter
    def ruleset_name(self, ruleset_name):
        """Sets the ruleset_name of this DatabaseRuleset.

        The name of the ruleset. This must be unique within an environment.  # noqa: E501

        :param ruleset_name: The ruleset_name of this DatabaseRuleset.  # noqa: E501
        :type: str
        """
        if ruleset_name is None:
            raise ValueError("Invalid value for `ruleset_name`, must not be `None`")  # noqa: E501
        if ruleset_name is not None and len(ruleset_name) > 50:
            raise ValueError("Invalid value for `ruleset_name`, length must be less than or equal to `50`")  # noqa: E501

        self._ruleset_name = ruleset_name

    @property
    def database_connector_id(self):
        """Gets the database_connector_id of this DatabaseRuleset.  # noqa: E501

        The ID of the database connector that this ruleset corresponds to. Note that the ruleset will be created on the same environment as its connector.  # noqa: E501

        :return: The database_connector_id of this DatabaseRuleset.  # noqa: E501
        :rtype: int
        """
        return self._database_connector_id

    @database_connector_id.setter
    def database_connector_id(self, database_connector_id):
        """Sets the database_connector_id of this DatabaseRuleset.

        The ID of the database connector that this ruleset corresponds to. Note that the ruleset will be created on the same environment as its connector.  # noqa: E501

        :param database_connector_id: The database_connector_id of this DatabaseRuleset.  # noqa: E501
        :type: int
        """
        if database_connector_id is None:
            raise ValueError("Invalid value for `database_connector_id`, must not be `None`")  # noqa: E501

        self._database_connector_id = database_connector_id

    @property
    def refresh_drops_tables(self):
        """Gets the refresh_drops_tables of this DatabaseRuleset.  # noqa: E501

        This field applies to the case where a Table Metadata exists in the Masking Engine, but the corresponding table no longer exists in the external database (e.g. if the table has been deleted or renamed). In that event, True will cause the refresh operation to delete the invalid Table Metadata, whereas False will fail the refresh instead.  # noqa: E501

        :return: The refresh_drops_tables of this DatabaseRuleset.  # noqa: E501
        :rtype: bool
        """
        return self._refresh_drops_tables

    @refresh_drops_tables.setter
    def refresh_drops_tables(self, refresh_drops_tables):
        """Sets the refresh_drops_tables of this DatabaseRuleset.

        This field applies to the case where a Table Metadata exists in the Masking Engine, but the corresponding table no longer exists in the external database (e.g. if the table has been deleted or renamed). In that event, True will cause the refresh operation to delete the invalid Table Metadata, whereas False will fail the refresh instead.  # noqa: E501

        :param refresh_drops_tables: The refresh_drops_tables of this DatabaseRuleset.  # noqa: E501
        :type: bool
        """

        self._refresh_drops_tables = refresh_drops_tables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatabaseRuleset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseRuleset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
