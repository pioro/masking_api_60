# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExecutionEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_event_id': 'int',
        'execution_id': 'int',
        'event_type': 'str',
        'severity': 'str',
        'cause': 'str',
        'count': 'int',
        'time_stamp': 'datetime',
        'execution_component_id': 'int',
        'masked_object_name': 'str',
        'algorithm_name': 'str',
        'exception_type': 'str',
        'exception_detail': 'str'
    }

    attribute_map = {
        'execution_event_id': 'executionEventId',
        'execution_id': 'executionId',
        'event_type': 'eventType',
        'severity': 'severity',
        'cause': 'cause',
        'count': 'count',
        'time_stamp': 'timeStamp',
        'execution_component_id': 'executionComponentId',
        'masked_object_name': 'maskedObjectName',
        'algorithm_name': 'algorithmName',
        'exception_type': 'exceptionType',
        'exception_detail': 'exceptionDetail'
    }

    def __init__(self, execution_event_id=None, execution_id=None, event_type=None, severity=None, cause=None, count=None, time_stamp=None, execution_component_id=None, masked_object_name=None, algorithm_name=None, exception_type=None, exception_detail=None):  # noqa: E501
        """ExecutionEvent - a model defined in Swagger"""  # noqa: E501

        self._execution_event_id = None
        self._execution_id = None
        self._event_type = None
        self._severity = None
        self._cause = None
        self._count = None
        self._time_stamp = None
        self._execution_component_id = None
        self._masked_object_name = None
        self._algorithm_name = None
        self._exception_type = None
        self._exception_detail = None
        self.discriminator = None

        if execution_event_id is not None:
            self.execution_event_id = execution_event_id
        if execution_id is not None:
            self.execution_id = execution_id
        if event_type is not None:
            self.event_type = event_type
        if severity is not None:
            self.severity = severity
        if cause is not None:
            self.cause = cause
        if count is not None:
            self.count = count
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if execution_component_id is not None:
            self.execution_component_id = execution_component_id
        if masked_object_name is not None:
            self.masked_object_name = masked_object_name
        if algorithm_name is not None:
            self.algorithm_name = algorithm_name
        if exception_type is not None:
            self.exception_type = exception_type
        if exception_detail is not None:
            self.exception_detail = exception_detail

    @property
    def execution_event_id(self):
        """Gets the execution_event_id of this ExecutionEvent.  # noqa: E501

        The ID of the execution event.  # noqa: E501

        :return: The execution_event_id of this ExecutionEvent.  # noqa: E501
        :rtype: int
        """
        return self._execution_event_id

    @execution_event_id.setter
    def execution_event_id(self, execution_event_id):
        """Sets the execution_event_id of this ExecutionEvent.

        The ID of the execution event.  # noqa: E501

        :param execution_event_id: The execution_event_id of this ExecutionEvent.  # noqa: E501
        :type: int
        """

        self._execution_event_id = execution_event_id

    @property
    def execution_id(self):
        """Gets the execution_id of this ExecutionEvent.  # noqa: E501

        The ID of the execution.  # noqa: E501

        :return: The execution_id of this ExecutionEvent.  # noqa: E501
        :rtype: int
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ExecutionEvent.

        The ID of the execution.  # noqa: E501

        :param execution_id: The execution_id of this ExecutionEvent.  # noqa: E501
        :type: int
        """

        self._execution_id = execution_id

    @property
    def event_type(self):
        """Gets the event_type of this ExecutionEvent.  # noqa: E501

        The type of execution event.  # noqa: E501

        :return: The event_type of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ExecutionEvent.

        The type of execution event.  # noqa: E501

        :param event_type: The event_type of this ExecutionEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["JOB_ABORTED", "UNMASKED_DATA", "MASKING_FALLBACK"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def severity(self):
        """Gets the severity of this ExecutionEvent.  # noqa: E501

        The severity of the execution event.  # noqa: E501

        :return: The severity of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ExecutionEvent.

        The severity of the execution event.  # noqa: E501

        :param severity: The severity of this ExecutionEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "WARNING", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def cause(self):
        """Gets the cause of this ExecutionEvent.  # noqa: E501

        The cause of the execution event.  # noqa: E501

        :return: The cause of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this ExecutionEvent.

        The cause of the execution event.  # noqa: E501

        :param cause: The cause of this ExecutionEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNHANDLED_EXCEPTION", "IGNORED_EXCEPTION", "PATTERN_MATCH_FAILURE", "PREMASK_TYPE_CONVERSION_FAILURE", "POSTMASK_TYPE_CONVERSION_FAILURE", "EXTENDED_ALGORITHM_FAILURE"]  # noqa: E501
        if cause not in allowed_values:
            raise ValueError(
                "Invalid value for `cause` ({0}), must be one of {1}"  # noqa: E501
                .format(cause, allowed_values)
            )

        self._cause = cause

    @property
    def count(self):
        """Gets the count of this ExecutionEvent.  # noqa: E501

        The number of times the execution event occurred.  # noqa: E501

        :return: The count of this ExecutionEvent.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ExecutionEvent.

        The number of times the execution event occurred.  # noqa: E501

        :param count: The count of this ExecutionEvent.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ExecutionEvent.  # noqa: E501

        The date and time that this execution event first occurred.  # noqa: E501

        :return: The time_stamp of this ExecutionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ExecutionEvent.

        The date and time that this execution event first occurred.  # noqa: E501

        :param time_stamp: The time_stamp of this ExecutionEvent.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def execution_component_id(self):
        """Gets the execution_component_id of this ExecutionEvent.  # noqa: E501

        The ID of the execution component with which this execution event is associated  # noqa: E501

        :return: The execution_component_id of this ExecutionEvent.  # noqa: E501
        :rtype: int
        """
        return self._execution_component_id

    @execution_component_id.setter
    def execution_component_id(self, execution_component_id):
        """Sets the execution_component_id of this ExecutionEvent.

        The ID of the execution component with which this execution event is associated  # noqa: E501

        :param execution_component_id: The execution_component_id of this ExecutionEvent.  # noqa: E501
        :type: int
        """

        self._execution_component_id = execution_component_id

    @property
    def masked_object_name(self):
        """Gets the masked_object_name of this ExecutionEvent.  # noqa: E501

        The name of the column, field, or other object being masked when this event occurred, if applicable.  # noqa: E501

        :return: The masked_object_name of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._masked_object_name

    @masked_object_name.setter
    def masked_object_name(self, masked_object_name):
        """Sets the masked_object_name of this ExecutionEvent.

        The name of the column, field, or other object being masked when this event occurred, if applicable.  # noqa: E501

        :param masked_object_name: The masked_object_name of this ExecutionEvent.  # noqa: E501
        :type: str
        """

        self._masked_object_name = masked_object_name

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this ExecutionEvent.  # noqa: E501

        The name of the masking algorithm running when this event occurred, if applicable.  # noqa: E501

        :return: The algorithm_name of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this ExecutionEvent.

        The name of the masking algorithm running when this event occurred, if applicable.  # noqa: E501

        :param algorithm_name: The algorithm_name of this ExecutionEvent.  # noqa: E501
        :type: str
        """

        self._algorithm_name = algorithm_name

    @property
    def exception_type(self):
        """Gets the exception_type of this ExecutionEvent.  # noqa: E501

        The Java class of the exception that triggered this event, if applicable.  # noqa: E501

        :return: The exception_type of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this ExecutionEvent.

        The Java class of the exception that triggered this event, if applicable.  # noqa: E501

        :param exception_type: The exception_type of this ExecutionEvent.  # noqa: E501
        :type: str
        """

        self._exception_type = exception_type

    @property
    def exception_detail(self):
        """Gets the exception_detail of this ExecutionEvent.  # noqa: E501

        The details associated with the Java exception that triggered this event, if applicable.  # noqa: E501

        :return: The exception_detail of this ExecutionEvent.  # noqa: E501
        :rtype: str
        """
        return self._exception_detail

    @exception_detail.setter
    def exception_detail(self, exception_detail):
        """Sets the exception_detail of this ExecutionEvent.

        The details associated with the Java exception that triggered this event, if applicable.  # noqa: E501

        :param exception_detail: The exception_detail of this ExecutionEvent.  # noqa: E501
        :type: str
        """

        self._exception_detail = exception_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutionEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
