# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExportObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_response_metadata': 'object',
        'blob': 'str',
        'signature': 'str',
        'public_key': 'str'
    }

    attribute_map = {
        'export_response_metadata': 'exportResponseMetadata',
        'blob': 'blob',
        'signature': 'signature',
        'public_key': 'publicKey'
    }

    def __init__(self, export_response_metadata=None, blob=None, signature=None, public_key=None):  # noqa: E501
        """ExportObject - a model defined in Swagger"""  # noqa: E501

        self._export_response_metadata = None
        self._blob = None
        self._signature = None
        self._public_key = None
        self.discriminator = None

        self.export_response_metadata = export_response_metadata
        self.blob = blob
        self.signature = signature
        self.public_key = public_key

    @property
    def export_response_metadata(self):
        """Gets the export_response_metadata of this ExportObject.  # noqa: E501


        :return: The export_response_metadata of this ExportObject.  # noqa: E501
        :rtype: object
        """
        return self._export_response_metadata

    @export_response_metadata.setter
    def export_response_metadata(self, export_response_metadata):
        """Sets the export_response_metadata of this ExportObject.


        :param export_response_metadata: The export_response_metadata of this ExportObject.  # noqa: E501
        :type: object
        """
        if export_response_metadata is None:
            raise ValueError("Invalid value for `export_response_metadata`, must not be `None`")  # noqa: E501

        self._export_response_metadata = export_response_metadata

    @property
    def blob(self):
        """Gets the blob of this ExportObject.  # noqa: E501

        Export package containing data representing masking object  # noqa: E501

        :return: The blob of this ExportObject.  # noqa: E501
        :rtype: str
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this ExportObject.

        Export package containing data representing masking object  # noqa: E501

        :param blob: The blob of this ExportObject.  # noqa: E501
        :type: str
        """
        if blob is None:
            raise ValueError("Invalid value for `blob`, must not be `None`")  # noqa: E501

        self._blob = blob

    @property
    def signature(self):
        """Gets the signature of this ExportObject.  # noqa: E501

        Cryptographic signature of the blob  # noqa: E501

        :return: The signature of this ExportObject.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ExportObject.

        Cryptographic signature of the blob  # noqa: E501

        :param signature: The signature of this ExportObject.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def public_key(self):
        """Gets the public_key of this ExportObject.  # noqa: E501

        Public version of the key used to generate the signature  # noqa: E501

        :return: The public_key of this ExportObject.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ExportObject.

        Public version of the key used to generate the signature  # noqa: E501

        :param public_key: The public_key of this ExportObject.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
