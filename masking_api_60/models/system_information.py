# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'build': 'str',
        'latest_global_key_reset_time': 'str',
        'patent_numbers': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'build': 'build',
        'latest_global_key_reset_time': 'latestGlobalKeyResetTime',
        'patent_numbers': 'patentNumbers'
    }

    def __init__(self, version=None, build=None, latest_global_key_reset_time=None, patent_numbers=None):  # noqa: E501
        """SystemInformation - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._build = None
        self._latest_global_key_reset_time = None
        self._patent_numbers = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if build is not None:
            self.build = build
        if latest_global_key_reset_time is not None:
            self.latest_global_key_reset_time = latest_global_key_reset_time
        if patent_numbers is not None:
            self.patent_numbers = patent_numbers

    @property
    def version(self):
        """Gets the version of this SystemInformation.  # noqa: E501

        The current version of the Masking Engine.  # noqa: E501

        :return: The version of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInformation.

        The current version of the Masking Engine.  # noqa: E501

        :param version: The version of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this SystemInformation.  # noqa: E501

        The current build of the Masking Engine.  # noqa: E501

        :return: The build of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SystemInformation.

        The current build of the Masking Engine.  # noqa: E501

        :param build: The build of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def latest_global_key_reset_time(self):
        """Gets the latest_global_key_reset_time of this SystemInformation.  # noqa: E501

        The latest time the global encryption key has been regenerated.  # noqa: E501

        :return: The latest_global_key_reset_time of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._latest_global_key_reset_time

    @latest_global_key_reset_time.setter
    def latest_global_key_reset_time(self, latest_global_key_reset_time):
        """Sets the latest_global_key_reset_time of this SystemInformation.

        The latest time the global encryption key has been regenerated.  # noqa: E501

        :param latest_global_key_reset_time: The latest_global_key_reset_time of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._latest_global_key_reset_time = latest_global_key_reset_time

    @property
    def patent_numbers(self):
        """Gets the patent_numbers of this SystemInformation.  # noqa: E501

        The patent numbers for the Masking Engine.  # noqa: E501

        :return: The patent_numbers of this SystemInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._patent_numbers

    @patent_numbers.setter
    def patent_numbers(self, patent_numbers):
        """Sets the patent_numbers of this SystemInformation.

        The patent numbers for the Masking Engine.  # noqa: E501

        :param patent_numbers: The patent_numbers of this SystemInformation.  # noqa: E501
        :type: list[str]
        """

        self._patent_numbers = patent_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
