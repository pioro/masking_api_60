# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_mode': 'str',
        'path': 'str',
        'mount_id': 'int',
        'host': 'str',
        'login_name': 'str',
        'password': 'str',
        'port': 'int',
        'ssh_key': 'str'
    }

    attribute_map = {
        'connection_mode': 'connectionMode',
        'path': 'path',
        'mount_id': 'mountId',
        'host': 'host',
        'login_name': 'loginName',
        'password': 'password',
        'port': 'port',
        'ssh_key': 'sshKey'
    }

    def __init__(self, connection_mode=None, path=None, mount_id=None, host=None, login_name=None, password=None, port=None, ssh_key=None):  # noqa: E501
        """ConnectionInfo - a model defined in Swagger"""  # noqa: E501

        self._connection_mode = None
        self._path = None
        self._mount_id = None
        self._host = None
        self._login_name = None
        self._password = None
        self._port = None
        self._ssh_key = None
        self.discriminator = None

        self.connection_mode = connection_mode
        if path is not None:
            self.path = path
        if mount_id is not None:
            self.mount_id = mount_id
        if host is not None:
            self.host = host
        if login_name is not None:
            self.login_name = login_name
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if ssh_key is not None:
            self.ssh_key = ssh_key

    @property
    def connection_mode(self):
        """Gets the connection_mode of this ConnectionInfo.  # noqa: E501

        This field denotes which connection mode the connector will use to connect to the underlying files.  # noqa: E501

        :return: The connection_mode of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this ConnectionInfo.

        This field denotes which connection mode the connector will use to connect to the underlying files.  # noqa: E501

        :param connection_mode: The connection_mode of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if connection_mode is None:
            raise ValueError("Invalid value for `connection_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["FTP", "MOUNT", "SFTP"]  # noqa: E501
        if connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_mode, allowed_values)
            )

        self._connection_mode = connection_mode

    @property
    def path(self):
        """Gets the path of this ConnectionInfo.  # noqa: E501

        This field applies to all connection modes, and it is the file system path to the desired files.  # noqa: E501

        :return: The path of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConnectionInfo.

        This field applies to all connection modes, and it is the file system path to the desired files.  # noqa: E501

        :param path: The path of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if path is not None and len(path) > 255:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `255`")  # noqa: E501

        self._path = path

    @property
    def mount_id(self):
        """Gets the mount_id of this ConnectionInfo.  # noqa: E501

        This field only applies to the Filesystem Mount Point connection mode, and it is the id of the mount containing the desired files.  # noqa: E501

        :return: The mount_id of this ConnectionInfo.  # noqa: E501
        :rtype: int
        """
        return self._mount_id

    @mount_id.setter
    def mount_id(self, mount_id):
        """Sets the mount_id of this ConnectionInfo.

        This field only applies to the Filesystem Mount Point connection mode, and it is the id of the mount containing the desired files.  # noqa: E501

        :param mount_id: The mount_id of this ConnectionInfo.  # noqa: E501
        :type: int
        """

        self._mount_id = mount_id

    @property
    def host(self):
        """Gets the host of this ConnectionInfo.  # noqa: E501

        This field is the host address belonging to the FTP/SFTP server.  # noqa: E501

        :return: The host of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConnectionInfo.

        This field is the host address belonging to the FTP/SFTP server.  # noqa: E501

        :param host: The host of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if host is not None and len(host) > 255:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `255`")  # noqa: E501

        self._host = host

    @property
    def login_name(self):
        """Gets the login_name of this ConnectionInfo.  # noqa: E501

        This field is the login name to be used to authenticate with the FTP/SFTP server.  # noqa: E501

        :return: The login_name of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this ConnectionInfo.

        This field is the login name to be used to authenticate with the FTP/SFTP server.  # noqa: E501

        :param login_name: The login_name of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if login_name is not None and len(login_name) > 255:
            raise ValueError("Invalid value for `login_name`, length must be less than or equal to `255`")  # noqa: E501

        self._login_name = login_name

    @property
    def password(self):
        """Gets the password of this ConnectionInfo.  # noqa: E501

        This field is the password to be used to authenticate with the FTP/SFTP server. Note that for SFTP authentication, only one of the 'password' or 'sshKey' fields should be provided.  # noqa: E501

        :return: The password of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConnectionInfo.

        This field is the password to be used to authenticate with the FTP/SFTP server. Note that for SFTP authentication, only one of the 'password' or 'sshKey' fields should be provided.  # noqa: E501

        :param password: The password of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 255:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `255`")  # noqa: E501

        self._password = password

    @property
    def port(self):
        """Gets the port of this ConnectionInfo.  # noqa: E501

        This field is the port number on the host address that the FTP/SFTP server is listening to.  # noqa: E501

        :return: The port of this ConnectionInfo.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConnectionInfo.

        This field is the port number on the host address that the FTP/SFTP server is listening to.  # noqa: E501

        :param port: The port of this ConnectionInfo.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def ssh_key(self):
        """Gets the ssh_key of this ConnectionInfo.  # noqa: E501

        This field only applies to the SFTP connection mode, and it is a reference to the public SSH key to be used as an alternative means of authentication to the SFTP server. The public SSH key must already exist on the Masking Engine under the directory '/var/delphix/dmsuite/resources/SSHKeys'. Note that only one of the 'password' or 'sshKey' fields should be provided.  # noqa: E501

        :return: The ssh_key of this ConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key):
        """Sets the ssh_key of this ConnectionInfo.

        This field only applies to the SFTP connection mode, and it is a reference to the public SSH key to be used as an alternative means of authentication to the SFTP server. The public SSH key must already exist on the Masking Engine under the directory '/var/delphix/dmsuite/resources/SSHKeys'. Note that only one of the 'password' or 'sshKey' fields should be provided.  # noqa: E501

        :param ssh_key: The ssh_key of this ConnectionInfo.  # noqa: E501
        :type: str
        """
        if ssh_key is not None and len(ssh_key) > 255:
            raise ValueError("Invalid value for `ssh_key`, length must be less than or equal to `255`")  # noqa: E501

        self._ssh_key = ssh_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
