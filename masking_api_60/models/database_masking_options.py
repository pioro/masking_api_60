# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DatabaseMaskingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_update': 'bool',
        'commit_size': 'int',
        'disable_constraints': 'bool',
        'drop_indexes': 'bool',
        'disable_triggers': 'bool',
        'num_output_threads_per_stream': 'int',
        'truncate_tables': 'bool',
        'prescript': 'MaskingJobScript',
        'postscript': 'MaskingJobScript'
    }

    attribute_map = {
        'batch_update': 'batchUpdate',
        'commit_size': 'commitSize',
        'disable_constraints': 'disableConstraints',
        'drop_indexes': 'dropIndexes',
        'disable_triggers': 'disableTriggers',
        'num_output_threads_per_stream': 'numOutputThreadsPerStream',
        'truncate_tables': 'truncateTables',
        'prescript': 'prescript',
        'postscript': 'postscript'
    }

    def __init__(self, batch_update=True, commit_size=None, disable_constraints=False, drop_indexes=False, disable_triggers=False, num_output_threads_per_stream=1, truncate_tables=False, prescript=None, postscript=None):  # noqa: E501
        """DatabaseMaskingOptions - a model defined in Swagger"""  # noqa: E501

        self._batch_update = None
        self._commit_size = None
        self._disable_constraints = None
        self._drop_indexes = None
        self._disable_triggers = None
        self._num_output_threads_per_stream = None
        self._truncate_tables = None
        self._prescript = None
        self._postscript = None
        self.discriminator = None

        if batch_update is not None:
            self.batch_update = batch_update
        if commit_size is not None:
            self.commit_size = commit_size
        if disable_constraints is not None:
            self.disable_constraints = disable_constraints
        if drop_indexes is not None:
            self.drop_indexes = drop_indexes
        if disable_triggers is not None:
            self.disable_triggers = disable_triggers
        if num_output_threads_per_stream is not None:
            self.num_output_threads_per_stream = num_output_threads_per_stream
        if truncate_tables is not None:
            self.truncate_tables = truncate_tables
        if prescript is not None:
            self.prescript = prescript
        if postscript is not None:
            self.postscript = postscript

    @property
    def batch_update(self):
        """Gets the batch_update of this DatabaseMaskingOptions.  # noqa: E501

        This field determines whether the database load phase to output the masked data will be performed in batches. The size of the batches is determined by the field 'commitSize'. This option is recommended because it typically improves the performance of the masking job.  # noqa: E501

        :return: The batch_update of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._batch_update

    @batch_update.setter
    def batch_update(self, batch_update):
        """Sets the batch_update of this DatabaseMaskingOptions.

        This field determines whether the database load phase to output the masked data will be performed in batches. The size of the batches is determined by the field 'commitSize'. This option is recommended because it typically improves the performance of the masking job.  # noqa: E501

        :param batch_update: The batch_update of this DatabaseMaskingOptions.  # noqa: E501
        :type: bool
        """

        self._batch_update = batch_update

    @property
    def commit_size(self):
        """Gets the commit_size of this DatabaseMaskingOptions.  # noqa: E501

        This field corresponds to the size of the database commits when performing batch updates.  # noqa: E501

        :return: The commit_size of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: int
        """
        return self._commit_size

    @commit_size.setter
    def commit_size(self, commit_size):
        """Sets the commit_size of this DatabaseMaskingOptions.

        This field corresponds to the size of the database commits when performing batch updates.  # noqa: E501

        :param commit_size: The commit_size of this DatabaseMaskingOptions.  # noqa: E501
        :type: int
        """
        if commit_size is not None and commit_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `commit_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._commit_size = commit_size

    @property
    def disable_constraints(self):
        """Gets the disable_constraints of this DatabaseMaskingOptions.  # noqa: E501

        This field determines whether the database constraints on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the need to constantly reevaluate constraints while performing the data masking. Further, this option is often necessary for masking columns that are part of foreign key constraints because those constraints can be temporarily violated during the masking phase.  # noqa: E501

        :return: The disable_constraints of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_constraints

    @disable_constraints.setter
    def disable_constraints(self, disable_constraints):
        """Sets the disable_constraints of this DatabaseMaskingOptions.

        This field determines whether the database constraints on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the need to constantly reevaluate constraints while performing the data masking. Further, this option is often necessary for masking columns that are part of foreign key constraints because those constraints can be temporarily violated during the masking phase.  # noqa: E501

        :param disable_constraints: The disable_constraints of this DatabaseMaskingOptions.  # noqa: E501
        :type: bool
        """

        self._disable_constraints = disable_constraints

    @property
    def drop_indexes(self):
        """Gets the drop_indexes of this DatabaseMaskingOptions.  # noqa: E501

        This field determines whether the database indexes on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the need to constantly re-index the tables while performing the data masking.  # noqa: E501

        :return: The drop_indexes of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._drop_indexes

    @drop_indexes.setter
    def drop_indexes(self, drop_indexes):
        """Sets the drop_indexes of this DatabaseMaskingOptions.

        This field determines whether the database indexes on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the need to constantly re-index the tables while performing the data masking.  # noqa: E501

        :param drop_indexes: The drop_indexes of this DatabaseMaskingOptions.  # noqa: E501
        :type: bool
        """

        self._drop_indexes = drop_indexes

    @property
    def disable_triggers(self):
        """Gets the disable_triggers of this DatabaseMaskingOptions.  # noqa: E501

        This field determines whether the database triggers on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the constant execution of triggers while performing the data masking.  # noqa: E501

        :return: The disable_triggers of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_triggers

    @disable_triggers.setter
    def disable_triggers(self, disable_triggers):
        """Sets the disable_triggers of this DatabaseMaskingOptions.

        This field determines whether the database triggers on the tables to-be-masked will be temporarily disabled/dropped prior to when the masking phase starts, and then reenabled/recreated after the masking phase finishes. Due to the large amount of data mutation that is inherent to the masking phase, this option can improve performance by preventing the constant execution of triggers while performing the data masking.  # noqa: E501

        :param disable_triggers: The disable_triggers of this DatabaseMaskingOptions.  # noqa: E501
        :type: bool
        """

        self._disable_triggers = disable_triggers

    @property
    def num_output_threads_per_stream(self):
        """Gets the num_output_threads_per_stream of this DatabaseMaskingOptions.  # noqa: E501

        This field controls the amount of parallelism, per input stream, that the masking job uses to load back the masked data. For instance, specifying 4 output threads per stream with 5 input streams results in a total of 20 output threads for the whole job. The higher the value of this field, the more potential parallelism there will be in the job, but the masking job will consume more memory. WARNING: when masking a database and specifying more than 1 output thread per stream, there is the potential for a deadlock that could stall the masking job indefinitely.  # noqa: E501

        :return: The num_output_threads_per_stream of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: int
        """
        return self._num_output_threads_per_stream

    @num_output_threads_per_stream.setter
    def num_output_threads_per_stream(self, num_output_threads_per_stream):
        """Sets the num_output_threads_per_stream of this DatabaseMaskingOptions.

        This field controls the amount of parallelism, per input stream, that the masking job uses to load back the masked data. For instance, specifying 4 output threads per stream with 5 input streams results in a total of 20 output threads for the whole job. The higher the value of this field, the more potential parallelism there will be in the job, but the masking job will consume more memory. WARNING: when masking a database and specifying more than 1 output thread per stream, there is the potential for a deadlock that could stall the masking job indefinitely.  # noqa: E501

        :param num_output_threads_per_stream: The num_output_threads_per_stream of this DatabaseMaskingOptions.  # noqa: E501
        :type: int
        """
        if num_output_threads_per_stream is not None and num_output_threads_per_stream < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_output_threads_per_stream`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_output_threads_per_stream = num_output_threads_per_stream

    @property
    def truncate_tables(self):
        """Gets the truncate_tables of this DatabaseMaskingOptions.  # noqa: E501

        This field only applies when masking a database OnTheFly, and it determines whether the target database tables are truncated prior to loading the masked data into the target database (after the masking phase is done).  # noqa: E501

        :return: The truncate_tables of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._truncate_tables

    @truncate_tables.setter
    def truncate_tables(self, truncate_tables):
        """Sets the truncate_tables of this DatabaseMaskingOptions.

        This field only applies when masking a database OnTheFly, and it determines whether the target database tables are truncated prior to loading the masked data into the target database (after the masking phase is done).  # noqa: E501

        :param truncate_tables: The truncate_tables of this DatabaseMaskingOptions.  # noqa: E501
        :type: bool
        """

        self._truncate_tables = truncate_tables

    @property
    def prescript(self):
        """Gets the prescript of this DatabaseMaskingOptions.  # noqa: E501

        The SQL script that runs before the job executes.  # noqa: E501

        :return: The prescript of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: MaskingJobScript
        """
        return self._prescript

    @prescript.setter
    def prescript(self, prescript):
        """Sets the prescript of this DatabaseMaskingOptions.

        The SQL script that runs before the job executes.  # noqa: E501

        :param prescript: The prescript of this DatabaseMaskingOptions.  # noqa: E501
        :type: MaskingJobScript
        """

        self._prescript = prescript

    @property
    def postscript(self):
        """Gets the postscript of this DatabaseMaskingOptions.  # noqa: E501

        The SQL script that runs after the job executes.  # noqa: E501

        :return: The postscript of this DatabaseMaskingOptions.  # noqa: E501
        :rtype: MaskingJobScript
        """
        return self._postscript

    @postscript.setter
    def postscript(self, postscript):
        """Sets the postscript of this DatabaseMaskingOptions.

        The SQL script that runs after the job executes.  # noqa: E501

        :param postscript: The postscript of this DatabaseMaskingOptions.  # noqa: E501
        :type: MaskingJobScript
        """

        self._postscript = postscript

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatabaseMaskingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseMaskingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
