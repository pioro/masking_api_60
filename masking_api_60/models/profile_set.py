# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProfileSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_set_id': 'int',
        'profile_set_name': 'str',
        'profile_expression_ids': 'list[int]',
        'created_by': 'str',
        'created_time': 'datetime',
        'description': 'str'
    }

    attribute_map = {
        'profile_set_id': 'profileSetId',
        'profile_set_name': 'profileSetName',
        'profile_expression_ids': 'profileExpressionIds',
        'created_by': 'createdBy',
        'created_time': 'createdTime',
        'description': 'description'
    }

    def __init__(self, profile_set_id=None, profile_set_name=None, profile_expression_ids=None, created_by=None, created_time=None, description=None):  # noqa: E501
        """ProfileSet - a model defined in Swagger"""  # noqa: E501

        self._profile_set_id = None
        self._profile_set_name = None
        self._profile_expression_ids = None
        self._created_by = None
        self._created_time = None
        self._description = None
        self.discriminator = None

        if profile_set_id is not None:
            self.profile_set_id = profile_set_id
        self.profile_set_name = profile_set_name
        self.profile_expression_ids = profile_expression_ids
        if created_by is not None:
            self.created_by = created_by
        if created_time is not None:
            self.created_time = created_time
        if description is not None:
            self.description = description

    @property
    def profile_set_id(self):
        """Gets the profile_set_id of this ProfileSet.  # noqa: E501

        The ID number of the profile set. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The profile_set_id of this ProfileSet.  # noqa: E501
        :rtype: int
        """
        return self._profile_set_id

    @profile_set_id.setter
    def profile_set_id(self, profile_set_id):
        """Sets the profile_set_id of this ProfileSet.

        The ID number of the profile set. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param profile_set_id: The profile_set_id of this ProfileSet.  # noqa: E501
        :type: int
        """

        self._profile_set_id = profile_set_id

    @property
    def profile_set_name(self):
        """Gets the profile_set_name of this ProfileSet.  # noqa: E501

        The name of the profile set; it must be unique.  # noqa: E501

        :return: The profile_set_name of this ProfileSet.  # noqa: E501
        :rtype: str
        """
        return self._profile_set_name

    @profile_set_name.setter
    def profile_set_name(self, profile_set_name):
        """Sets the profile_set_name of this ProfileSet.

        The name of the profile set; it must be unique.  # noqa: E501

        :param profile_set_name: The profile_set_name of this ProfileSet.  # noqa: E501
        :type: str
        """
        if profile_set_name is None:
            raise ValueError("Invalid value for `profile_set_name`, must not be `None`")  # noqa: E501
        if profile_set_name is not None and len(profile_set_name) > 50:
            raise ValueError("Invalid value for `profile_set_name`, length must be less than or equal to `50`")  # noqa: E501

        self._profile_set_name = profile_set_name

    @property
    def profile_expression_ids(self):
        """Gets the profile_expression_ids of this ProfileSet.  # noqa: E501

        The list of ID numbers that correspond to the profile expressions that belong in this profile set. During the execution of a profile job with this profile set assigned, the profile expressions are evaluated in an arbitrary order.  # noqa: E501

        :return: The profile_expression_ids of this ProfileSet.  # noqa: E501
        :rtype: list[int]
        """
        return self._profile_expression_ids

    @profile_expression_ids.setter
    def profile_expression_ids(self, profile_expression_ids):
        """Sets the profile_expression_ids of this ProfileSet.

        The list of ID numbers that correspond to the profile expressions that belong in this profile set. During the execution of a profile job with this profile set assigned, the profile expressions are evaluated in an arbitrary order.  # noqa: E501

        :param profile_expression_ids: The profile_expression_ids of this ProfileSet.  # noqa: E501
        :type: list[int]
        """
        if profile_expression_ids is None:
            raise ValueError("Invalid value for `profile_expression_ids`, must not be `None`")  # noqa: E501

        self._profile_expression_ids = profile_expression_ids

    @property
    def created_by(self):
        """Gets the created_by of this ProfileSet.  # noqa: E501

        The user that created the profile set. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The created_by of this ProfileSet.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProfileSet.

        The user that created the profile set. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param created_by: The created_by of this ProfileSet.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 255:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `255`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this ProfileSet.  # noqa: E501

        The time when the profile set was created. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The created_time of this ProfileSet.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ProfileSet.

        The time when the profile set was created. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param created_time: The created_time of this ProfileSet.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this ProfileSet.  # noqa: E501

        A description of the purpose of the profile set.  # noqa: E501

        :return: The description of this ProfileSet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfileSet.

        A description of the purpose of the profile set.  # noqa: E501

        :param description: The description of this ProfileSet.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
