# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainframeDatasetMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mainframe_dataset_metadata_id': 'int',
        'file_name': 'str',
        'ruleset_id': 'int',
        'mainframe_dataset_format_id': 'int',
        'record_format': 'str',
        'name_is_regular_expression': 'bool'
    }

    attribute_map = {
        'mainframe_dataset_metadata_id': 'mainframeDatasetMetadataId',
        'file_name': 'fileName',
        'ruleset_id': 'rulesetId',
        'mainframe_dataset_format_id': 'mainframeDatasetFormatId',
        'record_format': 'recordFormat',
        'name_is_regular_expression': 'nameIsRegularExpression'
    }

    def __init__(self, mainframe_dataset_metadata_id=None, file_name=None, ruleset_id=None, mainframe_dataset_format_id=None, record_format='FIXED_BLOCKED', name_is_regular_expression=False):  # noqa: E501
        """MainframeDatasetMetadata - a model defined in Swagger"""  # noqa: E501

        self._mainframe_dataset_metadata_id = None
        self._file_name = None
        self._ruleset_id = None
        self._mainframe_dataset_format_id = None
        self._record_format = None
        self._name_is_regular_expression = None
        self.discriminator = None

        if mainframe_dataset_metadata_id is not None:
            self.mainframe_dataset_metadata_id = mainframe_dataset_metadata_id
        self.file_name = file_name
        self.ruleset_id = ruleset_id
        if mainframe_dataset_format_id is not None:
            self.mainframe_dataset_format_id = mainframe_dataset_format_id
        if record_format is not None:
            self.record_format = record_format
        if name_is_regular_expression is not None:
            self.name_is_regular_expression = name_is_regular_expression

    @property
    def mainframe_dataset_metadata_id(self):
        """Gets the mainframe_dataset_metadata_id of this MainframeDatasetMetadata.  # noqa: E501

        The ID of the Mainframe Dataset metadata. This field is set by the Masking Engine.  # noqa: E501

        :return: The mainframe_dataset_metadata_id of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_metadata_id

    @mainframe_dataset_metadata_id.setter
    def mainframe_dataset_metadata_id(self, mainframe_dataset_metadata_id):
        """Sets the mainframe_dataset_metadata_id of this MainframeDatasetMetadata.

        The ID of the Mainframe Dataset metadata. This field is set by the Masking Engine.  # noqa: E501

        :param mainframe_dataset_metadata_id: The mainframe_dataset_metadata_id of this MainframeDatasetMetadata.  # noqa: E501
        :type: int
        """

        self._mainframe_dataset_metadata_id = mainframe_dataset_metadata_id

    @property
    def file_name(self):
        """Gets the file_name of this MainframeDatasetMetadata.  # noqa: E501

        The name of the Mainframe Dataset metadata. This name must match the name of a file in the ruleset it is created on. This name must be unique for the given ruleset; in other words, the same file cannot be added to a ruleset more than once.  # noqa: E501

        :return: The file_name of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this MainframeDatasetMetadata.

        The name of the Mainframe Dataset metadata. This name must match the name of a file in the ruleset it is created on. This name must be unique for the given ruleset; in other words, the same file cannot be added to a ruleset more than once.  # noqa: E501

        :param file_name: The file_name of this MainframeDatasetMetadata.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501
        if file_name is not None and len(file_name) > 255:
            raise ValueError("Invalid value for `file_name`, length must be less than or equal to `255`")  # noqa: E501

        self._file_name = file_name

    @property
    def ruleset_id(self):
        """Gets the ruleset_id of this MainframeDatasetMetadata.  # noqa: E501

        The ID of the ruleset to create the Mainframe Dataset metadata on.  # noqa: E501

        :return: The ruleset_id of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: int
        """
        return self._ruleset_id

    @ruleset_id.setter
    def ruleset_id(self, ruleset_id):
        """Sets the ruleset_id of this MainframeDatasetMetadata.

        The ID of the ruleset to create the Mainframe Dataset metadata on.  # noqa: E501

        :param ruleset_id: The ruleset_id of this MainframeDatasetMetadata.  # noqa: E501
        :type: int
        """
        if ruleset_id is None:
            raise ValueError("Invalid value for `ruleset_id`, must not be `None`")  # noqa: E501

        self._ruleset_id = ruleset_id

    @property
    def mainframe_dataset_format_id(self):
        """Gets the mainframe_dataset_format_id of this MainframeDatasetMetadata.  # noqa: E501

        The ID of the Mainframe Dataset format corresponding to this Mainframe Dataset metadata. It is used to determine the fields for this file. This field is required.  # noqa: E501

        :return: The mainframe_dataset_format_id of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_format_id

    @mainframe_dataset_format_id.setter
    def mainframe_dataset_format_id(self, mainframe_dataset_format_id):
        """Sets the mainframe_dataset_format_id of this MainframeDatasetMetadata.

        The ID of the Mainframe Dataset format corresponding to this Mainframe Dataset metadata. It is used to determine the fields for this file. This field is required.  # noqa: E501

        :param mainframe_dataset_format_id: The mainframe_dataset_format_id of this MainframeDatasetMetadata.  # noqa: E501
        :type: int
        """

        self._mainframe_dataset_format_id = mainframe_dataset_format_id

    @property
    def record_format(self):
        """Gets the record_format of this MainframeDatasetMetadata.  # noqa: E501

        The record format type for the mainframe data set. Note that this enum corresponds to the Variable Length checkbox in the UI.  # noqa: E501

        :return: The record_format of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._record_format

    @record_format.setter
    def record_format(self, record_format):
        """Sets the record_format of this MainframeDatasetMetadata.

        The record format type for the mainframe data set. Note that this enum corresponds to the Variable Length checkbox in the UI.  # noqa: E501

        :param record_format: The record_format of this MainframeDatasetMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIXED_BLOCKED", "VARIABLE_BLOCKED"]  # noqa: E501
        if record_format not in allowed_values:
            raise ValueError(
                "Invalid value for `record_format` ({0}), must be one of {1}"  # noqa: E501
                .format(record_format, allowed_values)
            )

        self._record_format = record_format

    @property
    def name_is_regular_expression(self):
        """Gets the name_is_regular_expression of this MainframeDatasetMetadata.  # noqa: E501

        Whether or not this file name represents a regular expression.  # noqa: E501

        :return: The name_is_regular_expression of this MainframeDatasetMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._name_is_regular_expression

    @name_is_regular_expression.setter
    def name_is_regular_expression(self, name_is_regular_expression):
        """Sets the name_is_regular_expression of this MainframeDatasetMetadata.

        Whether or not this file name represents a regular expression.  # noqa: E501

        :param name_is_regular_expression: The name_is_regular_expression of this MainframeDatasetMetadata.  # noqa: E501
        :type: bool
        """

        self._name_is_regular_expression = name_is_regular_expression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainframeDatasetMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainframeDatasetMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
