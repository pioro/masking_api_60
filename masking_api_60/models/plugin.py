# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Plugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plugin_id': 'int',
        'plugin_name': 'str',
        'plugin_author': 'str',
        'original_file_name': 'str',
        'original_file_checksum': 'str',
        'install_date': 'datetime',
        'install_user': 'int',
        'built_in': 'bool',
        'plugin_version': 'str',
        'plugin_objects': 'list[PluginObject]'
    }

    attribute_map = {
        'plugin_id': 'pluginId',
        'plugin_name': 'pluginName',
        'plugin_author': 'pluginAuthor',
        'original_file_name': 'originalFileName',
        'original_file_checksum': 'originalFileChecksum',
        'install_date': 'installDate',
        'install_user': 'installUser',
        'built_in': 'builtIn',
        'plugin_version': 'pluginVersion',
        'plugin_objects': 'pluginObjects'
    }

    def __init__(self, plugin_id=None, plugin_name=None, plugin_author=None, original_file_name=None, original_file_checksum=None, install_date=None, install_user=None, built_in=None, plugin_version=None, plugin_objects=None):  # noqa: E501
        """Plugin - a model defined in Swagger"""  # noqa: E501

        self._plugin_id = None
        self._plugin_name = None
        self._plugin_author = None
        self._original_file_name = None
        self._original_file_checksum = None
        self._install_date = None
        self._install_user = None
        self._built_in = None
        self._plugin_version = None
        self._plugin_objects = None
        self.discriminator = None

        if plugin_id is not None:
            self.plugin_id = plugin_id
        if plugin_name is not None:
            self.plugin_name = plugin_name
        if plugin_author is not None:
            self.plugin_author = plugin_author
        if original_file_name is not None:
            self.original_file_name = original_file_name
        if original_file_checksum is not None:
            self.original_file_checksum = original_file_checksum
        if install_date is not None:
            self.install_date = install_date
        if install_user is not None:
            self.install_user = install_user
        if built_in is not None:
            self.built_in = built_in
        if plugin_version is not None:
            self.plugin_version = plugin_version
        if plugin_objects is not None:
            self.plugin_objects = plugin_objects

    @property
    def plugin_id(self):
        """Gets the plugin_id of this Plugin.  # noqa: E501

        The id of the algorithm plugin  # noqa: E501

        :return: The plugin_id of this Plugin.  # noqa: E501
        :rtype: int
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this Plugin.

        The id of the algorithm plugin  # noqa: E501

        :param plugin_id: The plugin_id of this Plugin.  # noqa: E501
        :type: int
        """

        self._plugin_id = plugin_id

    @property
    def plugin_name(self):
        """Gets the plugin_name of this Plugin.  # noqa: E501

        The name of the plugin  # noqa: E501

        :return: The plugin_name of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this Plugin.

        The name of the plugin  # noqa: E501

        :param plugin_name: The plugin_name of this Plugin.  # noqa: E501
        :type: str
        """

        self._plugin_name = plugin_name

    @property
    def plugin_author(self):
        """Gets the plugin_author of this Plugin.  # noqa: E501

        The author of the plugin  # noqa: E501

        :return: The plugin_author of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_author

    @plugin_author.setter
    def plugin_author(self, plugin_author):
        """Sets the plugin_author of this Plugin.

        The author of the plugin  # noqa: E501

        :param plugin_author: The plugin_author of this Plugin.  # noqa: E501
        :type: str
        """

        self._plugin_author = plugin_author

    @property
    def original_file_name(self):
        """Gets the original_file_name of this Plugin.  # noqa: E501

        The original name of the plugin JAR file  # noqa: E501

        :return: The original_file_name of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this Plugin.

        The original name of the plugin JAR file  # noqa: E501

        :param original_file_name: The original_file_name of this Plugin.  # noqa: E501
        :type: str
        """

        self._original_file_name = original_file_name

    @property
    def original_file_checksum(self):
        """Gets the original_file_checksum of this Plugin.  # noqa: E501

        The hex string value of the SHA-256 hash of the plugin JAR file  # noqa: E501

        :return: The original_file_checksum of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._original_file_checksum

    @original_file_checksum.setter
    def original_file_checksum(self, original_file_checksum):
        """Sets the original_file_checksum of this Plugin.

        The hex string value of the SHA-256 hash of the plugin JAR file  # noqa: E501

        :param original_file_checksum: The original_file_checksum of this Plugin.  # noqa: E501
        :type: str
        """

        self._original_file_checksum = original_file_checksum

    @property
    def install_date(self):
        """Gets the install_date of this Plugin.  # noqa: E501

        Date and time when this plugin was installed  # noqa: E501

        :return: The install_date of this Plugin.  # noqa: E501
        :rtype: datetime
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this Plugin.

        Date and time when this plugin was installed  # noqa: E501

        :param install_date: The install_date of this Plugin.  # noqa: E501
        :type: datetime
        """

        self._install_date = install_date

    @property
    def install_user(self):
        """Gets the install_user of this Plugin.  # noqa: E501

        The login ID of the user that installed this plugin  # noqa: E501

        :return: The install_user of this Plugin.  # noqa: E501
        :rtype: int
        """
        return self._install_user

    @install_user.setter
    def install_user(self, install_user):
        """Sets the install_user of this Plugin.

        The login ID of the user that installed this plugin  # noqa: E501

        :param install_user: The install_user of this Plugin.  # noqa: E501
        :type: int
        """

        self._install_user = install_user

    @property
    def built_in(self):
        """Gets the built_in of this Plugin.  # noqa: E501

        Whether this plugin was included with Delphix Engine software distribution  # noqa: E501

        :return: The built_in of this Plugin.  # noqa: E501
        :rtype: bool
        """
        return self._built_in

    @built_in.setter
    def built_in(self, built_in):
        """Sets the built_in of this Plugin.

        Whether this plugin was included with Delphix Engine software distribution  # noqa: E501

        :param built_in: The built_in of this Plugin.  # noqa: E501
        :type: bool
        """

        self._built_in = built_in

    @property
    def plugin_version(self):
        """Gets the plugin_version of this Plugin.  # noqa: E501

        The string version identifier of the plugin  # noqa: E501

        :return: The plugin_version of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_version

    @plugin_version.setter
    def plugin_version(self, plugin_version):
        """Sets the plugin_version of this Plugin.

        The string version identifier of the plugin  # noqa: E501

        :param plugin_version: The plugin_version of this Plugin.  # noqa: E501
        :type: str
        """

        self._plugin_version = plugin_version

    @property
    def plugin_objects(self):
        """Gets the plugin_objects of this Plugin.  # noqa: E501

        List of objects included in the plugin  # noqa: E501

        :return: The plugin_objects of this Plugin.  # noqa: E501
        :rtype: list[PluginObject]
        """
        return self._plugin_objects

    @plugin_objects.setter
    def plugin_objects(self, plugin_objects):
        """Sets the plugin_objects of this Plugin.

        List of objects included in the plugin  # noqa: E501

        :param plugin_objects: The plugin_objects of this Plugin.  # noqa: E501
        :type: list[PluginObject]
        """

        self._plugin_objects = plugin_objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Plugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
