# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SegmentMappingSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'int',
        'min_int': 'int',
        'max_int': 'int',
        'min_char': 'str',
        'max_char': 'str',
        'explicit_range': 'str',
        'min_real_int': 'int',
        'max_real_int': 'int',
        'min_real_char': 'str',
        'max_real_char': 'str',
        'explicit_real_range': 'str'
    }

    attribute_map = {
        'length': 'length',
        'min_int': 'minInt',
        'max_int': 'maxInt',
        'min_char': 'minChar',
        'max_char': 'maxChar',
        'explicit_range': 'explicitRange',
        'min_real_int': 'minRealInt',
        'max_real_int': 'maxRealInt',
        'min_real_char': 'minRealChar',
        'max_real_char': 'maxRealChar',
        'explicit_real_range': 'explicitRealRange'
    }

    def __init__(self, length=None, min_int=None, max_int=None, min_char=None, max_char=None, explicit_range=None, min_real_int=None, max_real_int=None, min_real_char=None, max_real_char=None, explicit_real_range=None):  # noqa: E501
        """SegmentMappingSegment - a model defined in Swagger"""  # noqa: E501

        self._length = None
        self._min_int = None
        self._max_int = None
        self._min_char = None
        self._max_char = None
        self._explicit_range = None
        self._min_real_int = None
        self._max_real_int = None
        self._min_real_char = None
        self._max_real_char = None
        self._explicit_real_range = None
        self.discriminator = None

        if length is not None:
            self.length = length
        if min_int is not None:
            self.min_int = min_int
        if max_int is not None:
            self.max_int = max_int
        if min_char is not None:
            self.min_char = min_char
        if max_char is not None:
            self.max_char = max_char
        if explicit_range is not None:
            self.explicit_range = explicit_range
        if min_real_int is not None:
            self.min_real_int = min_real_int
        if max_real_int is not None:
            self.max_real_int = max_real_int
        if min_real_char is not None:
            self.min_real_char = min_real_char
        if max_real_char is not None:
            self.max_real_char = max_real_char
        if explicit_real_range is not None:
            self.explicit_real_range = explicit_real_range

    @property
    def length(self):
        """Gets the length of this SegmentMappingSegment.  # noqa: E501

        The length of the segment in digits. This must be 1 for alpha-numeric segments  # noqa: E501

        :return: The length of this SegmentMappingSegment.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SegmentMappingSegment.

        The length of the segment in digits. This must be 1 for alpha-numeric segments  # noqa: E501

        :param length: The length of this SegmentMappingSegment.  # noqa: E501
        :type: int
        """
        if length is not None and length > 4:  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `4`")  # noqa: E501
        if length is not None and length < 1:  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._length = length

    @property
    def min_int(self):
        """Gets the min_int of this SegmentMappingSegment.  # noqa: E501

        The minimum value of the integer output range of the mapping function  # noqa: E501

        :return: The min_int of this SegmentMappingSegment.  # noqa: E501
        :rtype: int
        """
        return self._min_int

    @min_int.setter
    def min_int(self, min_int):
        """Sets the min_int of this SegmentMappingSegment.

        The minimum value of the integer output range of the mapping function  # noqa: E501

        :param min_int: The min_int of this SegmentMappingSegment.  # noqa: E501
        :type: int
        """
        if min_int is not None and min_int > 9999:  # noqa: E501
            raise ValueError("Invalid value for `min_int`, must be a value less than or equal to `9999`")  # noqa: E501
        if min_int is not None and min_int < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_int`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_int = min_int

    @property
    def max_int(self):
        """Gets the max_int of this SegmentMappingSegment.  # noqa: E501

        The maximum value of the integer output range of the mapping function  # noqa: E501

        :return: The max_int of this SegmentMappingSegment.  # noqa: E501
        :rtype: int
        """
        return self._max_int

    @max_int.setter
    def max_int(self, max_int):
        """Sets the max_int of this SegmentMappingSegment.

        The maximum value of the integer output range of the mapping function  # noqa: E501

        :param max_int: The max_int of this SegmentMappingSegment.  # noqa: E501
        :type: int
        """
        if max_int is not None and max_int > 9999:  # noqa: E501
            raise ValueError("Invalid value for `max_int`, must be a value less than or equal to `9999`")  # noqa: E501
        if max_int is not None and max_int < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_int`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_int = max_int

    @property
    def min_char(self):
        """Gets the min_char of this SegmentMappingSegment.  # noqa: E501

        The minimum value of the character output range of the mapping function  # noqa: E501

        :return: The min_char of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._min_char

    @min_char.setter
    def min_char(self, min_char):
        """Sets the min_char of this SegmentMappingSegment.

        The minimum value of the character output range of the mapping function  # noqa: E501

        :param min_char: The min_char of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """
        if min_char is not None and len(min_char) > 1:
            raise ValueError("Invalid value for `min_char`, length must be less than or equal to `1`")  # noqa: E501
        if min_char is not None and len(min_char) < 1:
            raise ValueError("Invalid value for `min_char`, length must be greater than or equal to `1`")  # noqa: E501

        self._min_char = min_char

    @property
    def max_char(self):
        """Gets the max_char of this SegmentMappingSegment.  # noqa: E501

        The maximum value of the character output range of the mapping function  # noqa: E501

        :return: The max_char of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._max_char

    @max_char.setter
    def max_char(self, max_char):
        """Sets the max_char of this SegmentMappingSegment.

        The maximum value of the character output range of the mapping function  # noqa: E501

        :param max_char: The max_char of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """
        if max_char is not None and len(max_char) > 1:
            raise ValueError("Invalid value for `max_char`, length must be less than or equal to `1`")  # noqa: E501
        if max_char is not None and len(max_char) < 1:
            raise ValueError("Invalid value for `max_char`, length must be greater than or equal to `1`")  # noqa: E501

        self._max_char = max_char

    @property
    def explicit_range(self):
        """Gets the explicit_range of this SegmentMappingSegment.  # noqa: E501

        Explicitly specify the output range. Format depends on segment type and size  # noqa: E501

        :return: The explicit_range of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._explicit_range

    @explicit_range.setter
    def explicit_range(self, explicit_range):
        """Sets the explicit_range of this SegmentMappingSegment.

        Explicitly specify the output range. Format depends on segment type and size  # noqa: E501

        :param explicit_range: The explicit_range of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """

        self._explicit_range = explicit_range

    @property
    def min_real_int(self):
        """Gets the min_real_int of this SegmentMappingSegment.  # noqa: E501

        The minimum value of the integer range specifying which real values will be masked  # noqa: E501

        :return: The min_real_int of this SegmentMappingSegment.  # noqa: E501
        :rtype: int
        """
        return self._min_real_int

    @min_real_int.setter
    def min_real_int(self, min_real_int):
        """Sets the min_real_int of this SegmentMappingSegment.

        The minimum value of the integer range specifying which real values will be masked  # noqa: E501

        :param min_real_int: The min_real_int of this SegmentMappingSegment.  # noqa: E501
        :type: int
        """
        if min_real_int is not None and min_real_int > 9999:  # noqa: E501
            raise ValueError("Invalid value for `min_real_int`, must be a value less than or equal to `9999`")  # noqa: E501
        if min_real_int is not None and min_real_int < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_real_int`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_real_int = min_real_int

    @property
    def max_real_int(self):
        """Gets the max_real_int of this SegmentMappingSegment.  # noqa: E501

        The maximum value of the integer range specifying which real values will be masked  # noqa: E501

        :return: The max_real_int of this SegmentMappingSegment.  # noqa: E501
        :rtype: int
        """
        return self._max_real_int

    @max_real_int.setter
    def max_real_int(self, max_real_int):
        """Sets the max_real_int of this SegmentMappingSegment.

        The maximum value of the integer range specifying which real values will be masked  # noqa: E501

        :param max_real_int: The max_real_int of this SegmentMappingSegment.  # noqa: E501
        :type: int
        """
        if max_real_int is not None and max_real_int > 9999:  # noqa: E501
            raise ValueError("Invalid value for `max_real_int`, must be a value less than or equal to `9999`")  # noqa: E501
        if max_real_int is not None and max_real_int < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_real_int`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_real_int = max_real_int

    @property
    def min_real_char(self):
        """Gets the min_real_char of this SegmentMappingSegment.  # noqa: E501

        The minimum value of the character range specifying which real values will be masked  # noqa: E501

        :return: The min_real_char of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._min_real_char

    @min_real_char.setter
    def min_real_char(self, min_real_char):
        """Sets the min_real_char of this SegmentMappingSegment.

        The minimum value of the character range specifying which real values will be masked  # noqa: E501

        :param min_real_char: The min_real_char of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """
        if min_real_char is not None and len(min_real_char) > 1:
            raise ValueError("Invalid value for `min_real_char`, length must be less than or equal to `1`")  # noqa: E501
        if min_real_char is not None and len(min_real_char) < 1:
            raise ValueError("Invalid value for `min_real_char`, length must be greater than or equal to `1`")  # noqa: E501

        self._min_real_char = min_real_char

    @property
    def max_real_char(self):
        """Gets the max_real_char of this SegmentMappingSegment.  # noqa: E501

        The maximum value of the character range specifying which real values will be masked  # noqa: E501

        :return: The max_real_char of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._max_real_char

    @max_real_char.setter
    def max_real_char(self, max_real_char):
        """Sets the max_real_char of this SegmentMappingSegment.

        The maximum value of the character range specifying which real values will be masked  # noqa: E501

        :param max_real_char: The max_real_char of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """
        if max_real_char is not None and len(max_real_char) > 1:
            raise ValueError("Invalid value for `max_real_char`, length must be less than or equal to `1`")  # noqa: E501
        if max_real_char is not None and len(max_real_char) < 1:
            raise ValueError("Invalid value for `max_real_char`, length must be greater than or equal to `1`")  # noqa: E501

        self._max_real_char = max_real_char

    @property
    def explicit_real_range(self):
        """Gets the explicit_real_range of this SegmentMappingSegment.  # noqa: E501

        Explicitly specify the range of input values that should be masked. Format depends on segment type and size  # noqa: E501

        :return: The explicit_real_range of this SegmentMappingSegment.  # noqa: E501
        :rtype: str
        """
        return self._explicit_real_range

    @explicit_real_range.setter
    def explicit_real_range(self, explicit_real_range):
        """Sets the explicit_real_range of this SegmentMappingSegment.

        Explicitly specify the range of input values that should be masked. Format depends on segment type and size  # noqa: E501

        :param explicit_real_range: The explicit_real_range of this SegmentMappingSegment.  # noqa: E501
        :type: str
        """

        self._explicit_real_range = explicit_real_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentMappingSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentMappingSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
