# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Analytics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analytic_id': 'int',
        'analytic_type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'analytic_id': 'analyticId',
        'analytic_type': 'analyticType',
        'status': 'status'
    }

    def __init__(self, analytic_id=None, analytic_type=None, status=None):  # noqa: E501
        """Analytics - a model defined in Swagger"""  # noqa: E501

        self._analytic_id = None
        self._analytic_type = None
        self._status = None
        self.discriminator = None

        self.analytic_id = analytic_id
        self.analytic_type = analytic_type
        self.status = status

    @property
    def analytic_id(self):
        """Gets the analytic_id of this Analytics.  # noqa: E501

        Run ID of the start call  # noqa: E501

        :return: The analytic_id of this Analytics.  # noqa: E501
        :rtype: int
        """
        return self._analytic_id

    @analytic_id.setter
    def analytic_id(self, analytic_id):
        """Sets the analytic_id of this Analytics.

        Run ID of the start call  # noqa: E501

        :param analytic_id: The analytic_id of this Analytics.  # noqa: E501
        :type: int
        """
        if analytic_id is None:
            raise ValueError("Invalid value for `analytic_id`, must not be `None`")  # noqa: E501

        self._analytic_id = analytic_id

    @property
    def analytic_type(self):
        """Gets the analytic_type of this Analytics.  # noqa: E501

        Type of analytic  # noqa: E501

        :return: The analytic_type of this Analytics.  # noqa: E501
        :rtype: str
        """
        return self._analytic_type

    @analytic_type.setter
    def analytic_type(self, analytic_type):
        """Sets the analytic_type of this Analytics.

        Type of analytic  # noqa: E501

        :param analytic_type: The analytic_type of this Analytics.  # noqa: E501
        :type: str
        """
        if analytic_type is None:
            raise ValueError("Invalid value for `analytic_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CPU_TIME", "LOAD_AVERAGE", "MEMORY_USAGE", "OFF_CPU", "ON_CPU", "TCP_USAGE"]  # noqa: E501
        if analytic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analytic_type` ({0}), must be one of {1}"  # noqa: E501
                .format(analytic_type, allowed_values)
            )

        self._analytic_type = analytic_type

    @property
    def status(self):
        """Gets the status of this Analytics.  # noqa: E501

        Status of the run  # noqa: E501

        :return: The status of this Analytics.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Analytics.

        Status of the run  # noqa: E501

        :param status: The status of this Analytics.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "RUNNING", "FAILURE", "SUCCESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Analytics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Analytics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
