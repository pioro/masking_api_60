# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PluginJvmPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plugin_jvm_permission_id': 'int',
        'class_name': 'str',
        'target': 'str',
        'action': 'str'
    }

    attribute_map = {
        'plugin_jvm_permission_id': 'pluginJvmPermissionId',
        'class_name': 'className',
        'target': 'target',
        'action': 'action'
    }

    def __init__(self, plugin_jvm_permission_id=None, class_name=None, target=None, action=None):  # noqa: E501
        """PluginJvmPermission - a model defined in Swagger"""  # noqa: E501

        self._plugin_jvm_permission_id = None
        self._class_name = None
        self._target = None
        self._action = None
        self.discriminator = None

        if plugin_jvm_permission_id is not None:
            self.plugin_jvm_permission_id = plugin_jvm_permission_id
        if class_name is not None:
            self.class_name = class_name
        if target is not None:
            self.target = target
        if action is not None:
            self.action = action

    @property
    def plugin_jvm_permission_id(self):
        """Gets the plugin_jvm_permission_id of this PluginJvmPermission.  # noqa: E501

        The ID number of the plugin jvm permission. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The plugin_jvm_permission_id of this PluginJvmPermission.  # noqa: E501
        :rtype: int
        """
        return self._plugin_jvm_permission_id

    @plugin_jvm_permission_id.setter
    def plugin_jvm_permission_id(self, plugin_jvm_permission_id):
        """Sets the plugin_jvm_permission_id of this PluginJvmPermission.

        The ID number of the plugin jvm permission. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param plugin_jvm_permission_id: The plugin_jvm_permission_id of this PluginJvmPermission.  # noqa: E501
        :type: int
        """

        self._plugin_jvm_permission_id = plugin_jvm_permission_id

    @property
    def class_name(self):
        """Gets the class_name of this PluginJvmPermission.  # noqa: E501

        The class name of the permission.  # noqa: E501

        :return: The class_name of this PluginJvmPermission.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this PluginJvmPermission.

        The class name of the permission.  # noqa: E501

        :param class_name: The class_name of this PluginJvmPermission.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def target(self):
        """Gets the target of this PluginJvmPermission.  # noqa: E501

        The target name of the permission.  # noqa: E501

        :return: The target of this PluginJvmPermission.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PluginJvmPermission.

        The target name of the permission.  # noqa: E501

        :param target: The target of this PluginJvmPermission.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def action(self):
        """Gets the action of this PluginJvmPermission.  # noqa: E501

        The action of the permission.  # noqa: E501

        :return: The action of this PluginJvmPermission.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PluginJvmPermission.

        The action of the permission.  # noqa: E501

        :param action: The action of this PluginJvmPermission.  # noqa: E501
        :type: str
        """

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginJvmPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginJvmPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
