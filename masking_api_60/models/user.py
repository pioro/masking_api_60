# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'user_name': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'is_admin': 'bool',
        'show_welcome': 'bool',
        'is_locked': 'bool',
        'non_admin_properties': 'NonAdminProperties',
        'api_access': 'bool'
    }

    attribute_map = {
        'user_id': 'userId',
        'user_name': 'userName',
        'password': 'password',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'is_admin': 'isAdmin',
        'show_welcome': 'showWelcome',
        'is_locked': 'isLocked',
        'non_admin_properties': 'nonAdminProperties',
        'api_access': 'apiAccess'
    }

    def __init__(self, user_id=None, user_name=None, password=None, first_name=None, last_name=None, email=None, is_admin=None, show_welcome=True, is_locked=None, non_admin_properties=None, api_access=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._user_name = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._is_admin = None
        self._show_welcome = None
        self._is_locked = None
        self._non_admin_properties = None
        self._api_access = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        self.user_name = user_name
        if password is not None:
            self.password = password
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.is_admin = is_admin
        if show_welcome is not None:
            self.show_welcome = show_welcome
        self.is_locked = is_locked
        if non_admin_properties is not None:
            self.non_admin_properties = non_admin_properties
        if api_access is not None:
            self.api_access = api_access

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501

        The ID of the User. This field will be generated by the Masking Engine.  # noqa: E501

        :return: The user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        The ID of the User. This field will be generated by the Masking Engine.  # noqa: E501

        :param user_id: The user_id of this User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501

        The name for this User. Note that it must be unique among Users.  # noqa: E501

        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.

        The name for this User. Note that it must be unique among Users.  # noqa: E501

        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501
        if user_name is not None and len(user_name) > 255:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `255`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501

        The password for this User. NOTE: For updates, this field does not have to be set. If no password is provided on an update, then the current password will persist.  # noqa: E501

        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        The password for this User. NOTE: For updates, this field does not have to be set. If no password is provided on an update, then the current password will persist.  # noqa: E501

        :param password: The password of this User.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) > 12:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `12`")  # noqa: E501
        if password is not None and len(password) < 6:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `6`")  # noqa: E501

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        The first name of this User. This does not need to match the user name.  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of this User. This does not need to match the user name.  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        The last name of this User. This does not need to match the user name.  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of this User. This does not need to match the user name.  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email address for this User.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email address for this User.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501

        self._email = email

    @property
    def is_admin(self):
        """Gets the is_admin of this User.  # noqa: E501

        True for an administrative User, false for a non-administrative User.  # noqa: E501

        :return: The is_admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.

        True for an administrative User, false for a non-administrative User.  # noqa: E501

        :param is_admin: The is_admin of this User.  # noqa: E501
        :type: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")  # noqa: E501

        self._is_admin = is_admin

    @property
    def show_welcome(self):
        """Gets the show_welcome of this User.  # noqa: E501

        Flag to enable and disable welcome page for user, default true for a newly created User.  # noqa: E501

        :return: The show_welcome of this User.  # noqa: E501
        :rtype: bool
        """
        return self._show_welcome

    @show_welcome.setter
    def show_welcome(self, show_welcome):
        """Sets the show_welcome of this User.

        Flag to enable and disable welcome page for user, default true for a newly created User.  # noqa: E501

        :param show_welcome: The show_welcome of this User.  # noqa: E501
        :type: bool
        """

        self._show_welcome = show_welcome

    @property
    def is_locked(self):
        """Gets the is_locked of this User.  # noqa: E501

        True if a user is locked, set to false to unlock a locked user.  # noqa: E501

        :return: The is_locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this User.

        True if a user is locked, set to false to unlock a locked user.  # noqa: E501

        :param is_locked: The is_locked of this User.  # noqa: E501
        :type: bool
        """
        if is_locked is None:
            raise ValueError("Invalid value for `is_locked`, must not be `None`")  # noqa: E501

        self._is_locked = is_locked

    @property
    def non_admin_properties(self):
        """Gets the non_admin_properties of this User.  # noqa: E501

        This field only applies to non-admin Users, and it must always be provided for them.  # noqa: E501

        :return: The non_admin_properties of this User.  # noqa: E501
        :rtype: NonAdminProperties
        """
        return self._non_admin_properties

    @non_admin_properties.setter
    def non_admin_properties(self, non_admin_properties):
        """Sets the non_admin_properties of this User.

        This field only applies to non-admin Users, and it must always be provided for them.  # noqa: E501

        :param non_admin_properties: The non_admin_properties of this User.  # noqa: E501
        :type: NonAdminProperties
        """

        self._non_admin_properties = non_admin_properties

    @property
    def api_access(self):
        """Gets the api_access of this User.  # noqa: E501

        For use with SSO only. Flag to enable and disable api access for users. When SSO is enabled, the value defaults to true for admins and false for non-admins. When SSO is disabled, the value defaults to true for all users. The value is only modifiable when SSO is enabled and only by admins. The value is immutable for admin users. When SSO is disabled, the value is ignored and the user will be granted API access.  # noqa: E501

        :return: The api_access of this User.  # noqa: E501
        :rtype: bool
        """
        return self._api_access

    @api_access.setter
    def api_access(self, api_access):
        """Sets the api_access of this User.

        For use with SSO only. Flag to enable and disable api access for users. When SSO is enabled, the value defaults to true for admins and false for non-admins. When SSO is disabled, the value defaults to true for all users. The value is only modifiable when SSO is enabled and only by admins. The value is immutable for admin users. When SSO is disabled, the value is ignored and the user will be granted API access.  # noqa: E501

        :param api_access: The api_access of this User.  # noqa: E501
        :type: bool
        """

        self._api_access = api_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
