# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainframeDatasetRuleset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mainframe_dataset_ruleset_id': 'int',
        'ruleset_name': 'str',
        'mainframe_dataset_connector_id': 'int'
    }

    attribute_map = {
        'mainframe_dataset_ruleset_id': 'mainframeDatasetRulesetId',
        'ruleset_name': 'rulesetName',
        'mainframe_dataset_connector_id': 'mainframeDatasetConnectorId'
    }

    def __init__(self, mainframe_dataset_ruleset_id=None, ruleset_name=None, mainframe_dataset_connector_id=None):  # noqa: E501
        """MainframeDatasetRuleset - a model defined in Swagger"""  # noqa: E501

        self._mainframe_dataset_ruleset_id = None
        self._ruleset_name = None
        self._mainframe_dataset_connector_id = None
        self.discriminator = None

        if mainframe_dataset_ruleset_id is not None:
            self.mainframe_dataset_ruleset_id = mainframe_dataset_ruleset_id
        self.ruleset_name = ruleset_name
        self.mainframe_dataset_connector_id = mainframe_dataset_connector_id

    @property
    def mainframe_dataset_ruleset_id(self):
        """Gets the mainframe_dataset_ruleset_id of this MainframeDatasetRuleset.  # noqa: E501

        The ID of the Mainframe Dataset ruleset. This field is set by the Masking Engine.  # noqa: E501

        :return: The mainframe_dataset_ruleset_id of this MainframeDatasetRuleset.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_ruleset_id

    @mainframe_dataset_ruleset_id.setter
    def mainframe_dataset_ruleset_id(self, mainframe_dataset_ruleset_id):
        """Sets the mainframe_dataset_ruleset_id of this MainframeDatasetRuleset.

        The ID of the Mainframe Dataset ruleset. This field is set by the Masking Engine.  # noqa: E501

        :param mainframe_dataset_ruleset_id: The mainframe_dataset_ruleset_id of this MainframeDatasetRuleset.  # noqa: E501
        :type: int
        """

        self._mainframe_dataset_ruleset_id = mainframe_dataset_ruleset_id

    @property
    def ruleset_name(self):
        """Gets the ruleset_name of this MainframeDatasetRuleset.  # noqa: E501

        The name of the ruleset. This must be unique within an environment.  # noqa: E501

        :return: The ruleset_name of this MainframeDatasetRuleset.  # noqa: E501
        :rtype: str
        """
        return self._ruleset_name

    @ruleset_name.setter
    def ruleset_name(self, ruleset_name):
        """Sets the ruleset_name of this MainframeDatasetRuleset.

        The name of the ruleset. This must be unique within an environment.  # noqa: E501

        :param ruleset_name: The ruleset_name of this MainframeDatasetRuleset.  # noqa: E501
        :type: str
        """
        if ruleset_name is None:
            raise ValueError("Invalid value for `ruleset_name`, must not be `None`")  # noqa: E501
        if ruleset_name is not None and len(ruleset_name) > 50:
            raise ValueError("Invalid value for `ruleset_name`, length must be less than or equal to `50`")  # noqa: E501

        self._ruleset_name = ruleset_name

    @property
    def mainframe_dataset_connector_id(self):
        """Gets the mainframe_dataset_connector_id of this MainframeDatasetRuleset.  # noqa: E501

        The ID of the Mainframe Dataset Connector that this ruleset corresponds to. Note that the ruleset will be created on the same environment as its connector.  # noqa: E501

        :return: The mainframe_dataset_connector_id of this MainframeDatasetRuleset.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_connector_id

    @mainframe_dataset_connector_id.setter
    def mainframe_dataset_connector_id(self, mainframe_dataset_connector_id):
        """Sets the mainframe_dataset_connector_id of this MainframeDatasetRuleset.

        The ID of the Mainframe Dataset Connector that this ruleset corresponds to. Note that the ruleset will be created on the same environment as its connector.  # noqa: E501

        :param mainframe_dataset_connector_id: The mainframe_dataset_connector_id of this MainframeDatasetRuleset.  # noqa: E501
        :type: int
        """
        if mainframe_dataset_connector_id is None:
            raise ValueError("Invalid value for `mainframe_dataset_connector_id`, must not be `None`")  # noqa: E501

        self._mainframe_dataset_connector_id = mainframe_dataset_connector_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainframeDatasetRuleset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainframeDatasetRuleset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
