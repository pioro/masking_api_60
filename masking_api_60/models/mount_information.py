# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MountInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mount_id': 'int',
        'mount_name': 'str',
        'host_address': 'str',
        'mount_path': 'str',
        'type': 'str',
        'connect_on_startup': 'bool',
        'options': 'str',
        'status': 'str'
    }

    attribute_map = {
        'mount_id': 'mountId',
        'mount_name': 'mountName',
        'host_address': 'hostAddress',
        'mount_path': 'mountPath',
        'type': 'type',
        'connect_on_startup': 'connectOnStartup',
        'options': 'options',
        'status': 'status'
    }

    def __init__(self, mount_id=None, mount_name=None, host_address=None, mount_path=None, type=None, connect_on_startup=True, options=None, status=None):  # noqa: E501
        """MountInformation - a model defined in Swagger"""  # noqa: E501

        self._mount_id = None
        self._mount_name = None
        self._host_address = None
        self._mount_path = None
        self._type = None
        self._connect_on_startup = None
        self._options = None
        self._status = None
        self.discriminator = None

        if mount_id is not None:
            self.mount_id = mount_id
        self.mount_name = mount_name
        self.host_address = host_address
        self.mount_path = mount_path
        self.type = type
        if connect_on_startup is not None:
            self.connect_on_startup = connect_on_startup
        if options is not None:
            self.options = options
        if status is not None:
            self.status = status

    @property
    def mount_id(self):
        """Gets the mount_id of this MountInformation.  # noqa: E501

        The ID number of the mount. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The mount_id of this MountInformation.  # noqa: E501
        :rtype: int
        """
        return self._mount_id

    @mount_id.setter
    def mount_id(self, mount_id):
        """Sets the mount_id of this MountInformation.

        The ID number of the mount. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param mount_id: The mount_id of this MountInformation.  # noqa: E501
        :type: int
        """

        self._mount_id = mount_id

    @property
    def mount_name(self):
        """Gets the mount_name of this MountInformation.  # noqa: E501

        The name of the mount. This field must be unique.  # noqa: E501

        :return: The mount_name of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._mount_name

    @mount_name.setter
    def mount_name(self, mount_name):
        """Sets the mount_name of this MountInformation.

        The name of the mount. This field must be unique.  # noqa: E501

        :param mount_name: The mount_name of this MountInformation.  # noqa: E501
        :type: str
        """
        if mount_name is None:
            raise ValueError("Invalid value for `mount_name`, must not be `None`")  # noqa: E501
        if mount_name is not None and len(mount_name) > 255:
            raise ValueError("Invalid value for `mount_name`, length must be less than or equal to `255`")  # noqa: E501
        if mount_name is not None and len(mount_name) < 1:
            raise ValueError("Invalid value for `mount_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._mount_name = mount_name

    @property
    def host_address(self):
        """Gets the host_address of this MountInformation.  # noqa: E501

        The host address of the server. This field cannot be changed.  # noqa: E501

        :return: The host_address of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._host_address

    @host_address.setter
    def host_address(self, host_address):
        """Sets the host_address of this MountInformation.

        The host address of the server. This field cannot be changed.  # noqa: E501

        :param host_address: The host_address of this MountInformation.  # noqa: E501
        :type: str
        """
        if host_address is None:
            raise ValueError("Invalid value for `host_address`, must not be `None`")  # noqa: E501
        if host_address is not None and len(host_address) > 255:
            raise ValueError("Invalid value for `host_address`, length must be less than or equal to `255`")  # noqa: E501
        if host_address is not None and len(host_address) < 1:
            raise ValueError("Invalid value for `host_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._host_address = host_address

    @property
    def mount_path(self):
        """Gets the mount_path of this MountInformation.  # noqa: E501

        The path to the directory on the filesystem to mount. This field cannot be changed.  # noqa: E501

        :return: The mount_path of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this MountInformation.

        The path to the directory on the filesystem to mount. This field cannot be changed.  # noqa: E501

        :param mount_path: The mount_path of this MountInformation.  # noqa: E501
        :type: str
        """
        if mount_path is None:
            raise ValueError("Invalid value for `mount_path`, must not be `None`")  # noqa: E501
        if mount_path is not None and len(mount_path) > 4096:
            raise ValueError("Invalid value for `mount_path`, length must be less than or equal to `4096`")  # noqa: E501
        if mount_path is not None and len(mount_path) < 1:
            raise ValueError("Invalid value for `mount_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._mount_path = mount_path

    @property
    def type(self):
        """Gets the type of this MountInformation.  # noqa: E501

        The type of filesystem. This field cannot be changed.  # noqa: E501

        :return: The type of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MountInformation.

        The type of filesystem. This field cannot be changed.  # noqa: E501

        :param type: The type of this MountInformation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CIFS", "NFS3", "NFS4"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def connect_on_startup(self):
        """Gets the connect_on_startup of this MountInformation.  # noqa: E501

        This field determines whether this filesystem will be automatically connected (mounted) on startup of the masking engine. Note that all mounts will be disconnected on shutdown of the masking engine.  # noqa: E501

        :return: The connect_on_startup of this MountInformation.  # noqa: E501
        :rtype: bool
        """
        return self._connect_on_startup

    @connect_on_startup.setter
    def connect_on_startup(self, connect_on_startup):
        """Sets the connect_on_startup of this MountInformation.

        This field determines whether this filesystem will be automatically connected (mounted) on startup of the masking engine. Note that all mounts will be disconnected on shutdown of the masking engine.  # noqa: E501

        :param connect_on_startup: The connect_on_startup of this MountInformation.  # noqa: E501
        :type: bool
        """

        self._connect_on_startup = connect_on_startup

    @property
    def options(self):
        """Gets the options of this MountInformation.  # noqa: E501

        The options for mount. The endpoint will return all default options and user specified options.  # noqa: E501

        :return: The options of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MountInformation.

        The options for mount. The endpoint will return all default options and user specified options.  # noqa: E501

        :param options: The options of this MountInformation.  # noqa: E501
        :type: str
        """
        if options is not None and len(options) > 4096:
            raise ValueError("Invalid value for `options`, length must be less than or equal to `4096`")  # noqa: E501

        self._options = options

    @property
    def status(self):
        """Gets the status of this MountInformation.  # noqa: E501

        The connection status for mount. This field is automatically managed by the masking engine  # noqa: E501

        :return: The status of this MountInformation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MountInformation.

        The connection status for mount. This field is automatically managed by the masking engine  # noqa: E501

        :param status: The status of this MountInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DISCONNECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
