# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LogStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_statement': 'str',
        'log_level': 'str'
    }

    attribute_map = {
        'log_statement': 'logStatement',
        'log_level': 'logLevel'
    }

    def __init__(self, log_statement=None, log_level=None):  # noqa: E501
        """LogStatement - a model defined in Swagger"""  # noqa: E501

        self._log_statement = None
        self._log_level = None
        self.discriminator = None

        self.log_statement = log_statement
        self.log_level = log_level

    @property
    def log_statement(self):
        """Gets the log_statement of this LogStatement.  # noqa: E501

        The statement to inject into the Masking Engine logs.  # noqa: E501

        :return: The log_statement of this LogStatement.  # noqa: E501
        :rtype: str
        """
        return self._log_statement

    @log_statement.setter
    def log_statement(self, log_statement):
        """Sets the log_statement of this LogStatement.

        The statement to inject into the Masking Engine logs.  # noqa: E501

        :param log_statement: The log_statement of this LogStatement.  # noqa: E501
        :type: str
        """
        if log_statement is None:
            raise ValueError("Invalid value for `log_statement`, must not be `None`")  # noqa: E501
        if log_statement is not None and len(log_statement) > 1000:
            raise ValueError("Invalid value for `log_statement`, length must be less than or equal to `1000`")  # noqa: E501

        self._log_statement = log_statement

    @property
    def log_level(self):
        """Gets the log_level of this LogStatement.  # noqa: E501

        The log level at which to inject the log statement.  # noqa: E501

        :return: The log_level of this LogStatement.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this LogStatement.

        The log level at which to inject the log statement.  # noqa: E501

        :param log_level: The log_level of this LogStatement.  # noqa: E501
        :type: str
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")  # noqa: E501
        allowed_values = ["DEBUG", "ERROR", "INFO", "WARN"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
