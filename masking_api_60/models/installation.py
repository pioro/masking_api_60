# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Installation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_type': 'str',
        'file_reference_id': 'str',
        'requires_restart': 'bool'
    }

    attribute_map = {
        'file_type': 'fileType',
        'file_reference_id': 'fileReferenceId',
        'requires_restart': 'requiresRestart'
    }

    def __init__(self, file_type=None, file_reference_id=None, requires_restart=None):  # noqa: E501
        """Installation - a model defined in Swagger"""  # noqa: E501

        self._file_type = None
        self._file_reference_id = None
        self._requires_restart = None
        self.discriminator = None

        self.file_type = file_type
        self.file_reference_id = file_reference_id
        if requires_restart is not None:
            self.requires_restart = requires_restart

    @property
    def file_type(self):
        """Gets the file_type of this Installation.  # noqa: E501

        The type of file that is being installed.  # noqa: E501

        :return: The file_type of this Installation.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Installation.

        The type of file that is being installed.  # noqa: E501

        :param file_type: The file_type of this Installation.  # noqa: E501
        :type: str
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LICENSE_DB2_ISERIES", "LICENSE_DB2_MAINFRAME"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def file_reference_id(self):
        """Gets the file_reference_id of this Installation.  # noqa: E501

        The reference ID of the uploaded file to be installed. This file should have been uploaded via the /fileUpload endpoint.  # noqa: E501

        :return: The file_reference_id of this Installation.  # noqa: E501
        :rtype: str
        """
        return self._file_reference_id

    @file_reference_id.setter
    def file_reference_id(self, file_reference_id):
        """Sets the file_reference_id of this Installation.

        The reference ID of the uploaded file to be installed. This file should have been uploaded via the /fileUpload endpoint.  # noqa: E501

        :param file_reference_id: The file_reference_id of this Installation.  # noqa: E501
        :type: str
        """
        if file_reference_id is None:
            raise ValueError("Invalid value for `file_reference_id`, must not be `None`")  # noqa: E501

        self._file_reference_id = file_reference_id

    @property
    def requires_restart(self):
        """Gets the requires_restart of this Installation.  # noqa: E501

        True if the Masking Engine must be restarted for the installation to take effect, false otherwise.  # noqa: E501

        :return: The requires_restart of this Installation.  # noqa: E501
        :rtype: bool
        """
        return self._requires_restart

    @requires_restart.setter
    def requires_restart(self, requires_restart):
        """Sets the requires_restart of this Installation.

        True if the Masking Engine must be restarted for the installation to take effect, false otherwise.  # noqa: E501

        :param requires_restart: The requires_restart of this Installation.  # noqa: E501
        :type: bool
        """

        self._requires_restart = requires_restart

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Installation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Installation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
