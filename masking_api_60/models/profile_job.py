# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProfileJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_job_id': 'int',
        'job_name': 'str',
        'profile_set_id': 'int',
        'ruleset_id': 'int',
        'ruleset_type': 'str',
        'created_by': 'str',
        'created_time': 'datetime',
        'email': 'str',
        'feedback_size': 'int',
        'job_description': 'str',
        'max_memory': 'int',
        'min_memory': 'int',
        'multi_tenant': 'bool',
        'num_input_streams': 'int',
        'multiple_profiler_check': 'bool'
    }

    attribute_map = {
        'profile_job_id': 'profileJobId',
        'job_name': 'jobName',
        'profile_set_id': 'profileSetId',
        'ruleset_id': 'rulesetId',
        'ruleset_type': 'rulesetType',
        'created_by': 'createdBy',
        'created_time': 'createdTime',
        'email': 'email',
        'feedback_size': 'feedbackSize',
        'job_description': 'jobDescription',
        'max_memory': 'maxMemory',
        'min_memory': 'minMemory',
        'multi_tenant': 'multiTenant',
        'num_input_streams': 'numInputStreams',
        'multiple_profiler_check': 'multipleProfilerCheck'
    }

    def __init__(self, profile_job_id=None, job_name=None, profile_set_id=None, ruleset_id=None, ruleset_type=None, created_by=None, created_time=None, email=None, feedback_size=None, job_description=None, max_memory=None, min_memory=None, multi_tenant=False, num_input_streams=1, multiple_profiler_check=False):  # noqa: E501
        """ProfileJob - a model defined in Swagger"""  # noqa: E501

        self._profile_job_id = None
        self._job_name = None
        self._profile_set_id = None
        self._ruleset_id = None
        self._ruleset_type = None
        self._created_by = None
        self._created_time = None
        self._email = None
        self._feedback_size = None
        self._job_description = None
        self._max_memory = None
        self._min_memory = None
        self._multi_tenant = None
        self._num_input_streams = None
        self._multiple_profiler_check = None
        self.discriminator = None

        if profile_job_id is not None:
            self.profile_job_id = profile_job_id
        self.job_name = job_name
        self.profile_set_id = profile_set_id
        self.ruleset_id = ruleset_id
        if ruleset_type is not None:
            self.ruleset_type = ruleset_type
        if created_by is not None:
            self.created_by = created_by
        if created_time is not None:
            self.created_time = created_time
        if email is not None:
            self.email = email
        if feedback_size is not None:
            self.feedback_size = feedback_size
        if job_description is not None:
            self.job_description = job_description
        if max_memory is not None:
            self.max_memory = max_memory
        if min_memory is not None:
            self.min_memory = min_memory
        if multi_tenant is not None:
            self.multi_tenant = multi_tenant
        if num_input_streams is not None:
            self.num_input_streams = num_input_streams
        if multiple_profiler_check is not None:
            self.multiple_profiler_check = multiple_profiler_check

    @property
    def profile_job_id(self):
        """Gets the profile_job_id of this ProfileJob.  # noqa: E501

        The ID number of the profile job. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The profile_job_id of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._profile_job_id

    @profile_job_id.setter
    def profile_job_id(self, profile_job_id):
        """Sets the profile_job_id of this ProfileJob.

        The ID number of the profile job. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param profile_job_id: The profile_job_id of this ProfileJob.  # noqa: E501
        :type: int
        """

        self._profile_job_id = profile_job_id

    @property
    def job_name(self):
        """Gets the job_name of this ProfileJob.  # noqa: E501

        The name of the profile job. Once the profile job is created, this field cannot be changed.  # noqa: E501

        :return: The job_name of this ProfileJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this ProfileJob.

        The name of the profile job. Once the profile job is created, this field cannot be changed.  # noqa: E501

        :param job_name: The job_name of this ProfileJob.  # noqa: E501
        :type: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501
        if job_name is not None and len(job_name) > 50:
            raise ValueError("Invalid value for `job_name`, length must be less than or equal to `50`")  # noqa: E501

        self._job_name = job_name

    @property
    def profile_set_id(self):
        """Gets the profile_set_id of this ProfileJob.  # noqa: E501

        The ID number of the profile set to be used during the profiling phase.  # noqa: E501

        :return: The profile_set_id of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._profile_set_id

    @profile_set_id.setter
    def profile_set_id(self, profile_set_id):
        """Sets the profile_set_id of this ProfileJob.

        The ID number of the profile set to be used during the profiling phase.  # noqa: E501

        :param profile_set_id: The profile_set_id of this ProfileJob.  # noqa: E501
        :type: int
        """
        if profile_set_id is None:
            raise ValueError("Invalid value for `profile_set_id`, must not be `None`")  # noqa: E501

        self._profile_set_id = profile_set_id

    @property
    def ruleset_id(self):
        """Gets the ruleset_id of this ProfileJob.  # noqa: E501

        The ID of the ruleset that this profile job is targeting. Once the profile job is created, the underlying environment that is inferred from the ruleset will be unchangeable. That is, the job can only be updated to reference a ruleset that is in the same environment as the environment of the original ruleset.  # noqa: E501

        :return: The ruleset_id of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._ruleset_id

    @ruleset_id.setter
    def ruleset_id(self, ruleset_id):
        """Sets the ruleset_id of this ProfileJob.

        The ID of the ruleset that this profile job is targeting. Once the profile job is created, the underlying environment that is inferred from the ruleset will be unchangeable. That is, the job can only be updated to reference a ruleset that is in the same environment as the environment of the original ruleset.  # noqa: E501

        :param ruleset_id: The ruleset_id of this ProfileJob.  # noqa: E501
        :type: int
        """
        if ruleset_id is None:
            raise ValueError("Invalid value for `ruleset_id`, must not be `None`")  # noqa: E501

        self._ruleset_id = ruleset_id

    @property
    def ruleset_type(self):
        """Gets the ruleset_type of this ProfileJob.  # noqa: E501

        The type of the ruleset that this profile job is assigned to.  # noqa: E501

        :return: The ruleset_type of this ProfileJob.  # noqa: E501
        :rtype: str
        """
        return self._ruleset_type

    @ruleset_type.setter
    def ruleset_type(self, ruleset_type):
        """Sets the ruleset_type of this ProfileJob.

        The type of the ruleset that this profile job is assigned to.  # noqa: E501

        :param ruleset_type: The ruleset_type of this ProfileJob.  # noqa: E501
        :type: str
        """

        self._ruleset_type = ruleset_type

    @property
    def created_by(self):
        """Gets the created_by of this ProfileJob.  # noqa: E501

        The user that created the profile job. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The created_by of this ProfileJob.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProfileJob.

        The user that created the profile job. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param created_by: The created_by of this ProfileJob.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 255:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `255`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this ProfileJob.  # noqa: E501

        The time when the profile job was created. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The created_time of this ProfileJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ProfileJob.

        The time when the profile job was created. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param created_time: The created_time of this ProfileJob.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def email(self):
        """Gets the email of this ProfileJob.  # noqa: E501

        The email address to send job status notifications to; note that the SMTP settings must be configured first to receive notifications.  # noqa: E501

        :return: The email of this ProfileJob.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProfileJob.

        The email address to send job status notifications to; note that the SMTP settings must be configured first to receive notifications.  # noqa: E501

        :param email: The email of this ProfileJob.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def feedback_size(self):
        """Gets the feedback_size of this ProfileJob.  # noqa: E501

        The granularity with which the Masking Engine provides updates on the progress of the profile job. For instance, a feedbackSize of 50000 results in log updates whenever 50000 rows are processed during the profiling phase.  # noqa: E501

        :return: The feedback_size of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._feedback_size

    @feedback_size.setter
    def feedback_size(self, feedback_size):
        """Sets the feedback_size of this ProfileJob.

        The granularity with which the Masking Engine provides updates on the progress of the profile job. For instance, a feedbackSize of 50000 results in log updates whenever 50000 rows are processed during the profiling phase.  # noqa: E501

        :param feedback_size: The feedback_size of this ProfileJob.  # noqa: E501
        :type: int
        """
        if feedback_size is not None and feedback_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `feedback_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._feedback_size = feedback_size

    @property
    def job_description(self):
        """Gets the job_description of this ProfileJob.  # noqa: E501

        A description of the job.  # noqa: E501

        :return: The job_description of this ProfileJob.  # noqa: E501
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this ProfileJob.

        A description of the job.  # noqa: E501

        :param job_description: The job_description of this ProfileJob.  # noqa: E501
        :type: str
        """
        if job_description is not None and len(job_description) > 255:
            raise ValueError("Invalid value for `job_description`, length must be less than or equal to `255`")  # noqa: E501

        self._job_description = job_description

    @property
    def max_memory(self):
        """Gets the max_memory of this ProfileJob.  # noqa: E501

        The maximum amount of memory, in MB, that the profile job can consume during execution.  # noqa: E501

        :return: The max_memory of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._max_memory

    @max_memory.setter
    def max_memory(self, max_memory):
        """Sets the max_memory of this ProfileJob.

        The maximum amount of memory, in MB, that the profile job can consume during execution.  # noqa: E501

        :param max_memory: The max_memory of this ProfileJob.  # noqa: E501
        :type: int
        """

        self._max_memory = max_memory

    @property
    def min_memory(self):
        """Gets the min_memory of this ProfileJob.  # noqa: E501

        The minimum amount of memory, in MB, that the profile job can consume during execution.  # noqa: E501

        :return: The min_memory of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._min_memory

    @min_memory.setter
    def min_memory(self, min_memory):
        """Sets the min_memory of this ProfileJob.

        The minimum amount of memory, in MB, that the profile job can consume during execution.  # noqa: E501

        :param min_memory: The min_memory of this ProfileJob.  # noqa: E501
        :type: int
        """

        self._min_memory = min_memory

    @property
    def multi_tenant(self):
        """Gets the multi_tenant of this ProfileJob.  # noqa: E501

        This field determines whether the profile job, after creation, can be executed using a connector that is different from the underlying connector associated with the ruleset that this profile job is targeting.  # noqa: E501

        :return: The multi_tenant of this ProfileJob.  # noqa: E501
        :rtype: bool
        """
        return self._multi_tenant

    @multi_tenant.setter
    def multi_tenant(self, multi_tenant):
        """Sets the multi_tenant of this ProfileJob.

        This field determines whether the profile job, after creation, can be executed using a connector that is different from the underlying connector associated with the ruleset that this profile job is targeting.  # noqa: E501

        :param multi_tenant: The multi_tenant of this ProfileJob.  # noqa: E501
        :type: bool
        """

        self._multi_tenant = multi_tenant

    @property
    def num_input_streams(self):
        """Gets the num_input_streams of this ProfileJob.  # noqa: E501

        This field controls the amount of parallelism that the profile job uses to extract out the data to be profiled. For instance, when profiling a database, specifying 5 input streams results in the profile job reading up to 5 database tables in parallel and then profiling those 5 streams of data in parallel. The higher the value of this field, the more potential parallelism there will be in the job, but the profile job will consume more memory. If the number of input streams exceeds the number of units being profiled (e.g. tables or files), then the excess streams will do nothing.  # noqa: E501

        :return: The num_input_streams of this ProfileJob.  # noqa: E501
        :rtype: int
        """
        return self._num_input_streams

    @num_input_streams.setter
    def num_input_streams(self, num_input_streams):
        """Sets the num_input_streams of this ProfileJob.

        This field controls the amount of parallelism that the profile job uses to extract out the data to be profiled. For instance, when profiling a database, specifying 5 input streams results in the profile job reading up to 5 database tables in parallel and then profiling those 5 streams of data in parallel. The higher the value of this field, the more potential parallelism there will be in the job, but the profile job will consume more memory. If the number of input streams exceeds the number of units being profiled (e.g. tables or files), then the excess streams will do nothing.  # noqa: E501

        :param num_input_streams: The num_input_streams of this ProfileJob.  # noqa: E501
        :type: int
        """
        if num_input_streams is not None and num_input_streams < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_input_streams`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_input_streams = num_input_streams

    @property
    def multiple_profiler_check(self):
        """Gets the multiple_profiler_check of this ProfileJob.  # noqa: E501

        This field determines whether the profiler stops after it flags a field as sensitive or if it continues to scan for more sensitive patterns.  # noqa: E501

        :return: The multiple_profiler_check of this ProfileJob.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_profiler_check

    @multiple_profiler_check.setter
    def multiple_profiler_check(self, multiple_profiler_check):
        """Sets the multiple_profiler_check of this ProfileJob.

        This field determines whether the profiler stops after it flags a field as sensitive or if it continues to scan for more sensitive patterns.  # noqa: E501

        :param multiple_profiler_check: The multiple_profiler_check of this ProfileJob.  # noqa: E501
        :type: bool
        """

        self._multiple_profiler_check = multiple_profiler_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
