# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MinMaxExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'int',
        'max_value': 'int',
        'min_date': 'date',
        'max_date': 'date',
        'out_of_range_default_value': 'str'
    }

    attribute_map = {
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'min_date': 'minDate',
        'max_date': 'maxDate',
        'out_of_range_default_value': 'outOfRangeDefaultValue'
    }

    def __init__(self, min_value=None, max_value=None, min_date=None, max_date=None, out_of_range_default_value=None):  # noqa: E501
        """MinMaxExtension - a model defined in Swagger"""  # noqa: E501

        self._min_value = None
        self._max_value = None
        self._min_date = None
        self._max_date = None
        self._out_of_range_default_value = None
        self.discriminator = None

        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if min_date is not None:
            self.min_date = min_date
        if max_date is not None:
            self.max_date = max_date
        if out_of_range_default_value is not None:
            self.out_of_range_default_value = out_of_range_default_value

    @property
    def min_value(self):
        """Gets the min_value of this MinMaxExtension.  # noqa: E501

        The minimum value for a Number range used in conjunction with maxValue. This field cannot be combined with minDate or maxDate.  # noqa: E501

        :return: The min_value of this MinMaxExtension.  # noqa: E501
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this MinMaxExtension.

        The minimum value for a Number range used in conjunction with maxValue. This field cannot be combined with minDate or maxDate.  # noqa: E501

        :param min_value: The min_value of this MinMaxExtension.  # noqa: E501
        :type: int
        """
        if min_value is not None and min_value < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this MinMaxExtension.  # noqa: E501

        The maximum value for a Number range used in conjunction with and must be greater than minValue. This field cannot be combined with minDate or maxDate.  # noqa: E501

        :return: The max_value of this MinMaxExtension.  # noqa: E501
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this MinMaxExtension.

        The maximum value for a Number range used in conjunction with and must be greater than minValue. This field cannot be combined with minDate or maxDate.  # noqa: E501

        :param max_value: The max_value of this MinMaxExtension.  # noqa: E501
        :type: int
        """
        if max_value is not None and max_value < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_value`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_value = max_value

    @property
    def min_date(self):
        """Gets the min_date of this MinMaxExtension.  # noqa: E501

        The minimum value for a Date range used in conjunction with maxDate. The Date must be specified in one of the following formats according to RFC 3339 Section 5.6: \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", or \"EEE, dd MMM yyyy HH:mm:ss zzz\". If a timezone is not specified, the Date will be interpreted as UTC. This field cannot be combined with minValue or maxValue.  # noqa: E501

        :return: The min_date of this MinMaxExtension.  # noqa: E501
        :rtype: date
        """
        return self._min_date

    @min_date.setter
    def min_date(self, min_date):
        """Sets the min_date of this MinMaxExtension.

        The minimum value for a Date range used in conjunction with maxDate. The Date must be specified in one of the following formats according to RFC 3339 Section 5.6: \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", or \"EEE, dd MMM yyyy HH:mm:ss zzz\". If a timezone is not specified, the Date will be interpreted as UTC. This field cannot be combined with minValue or maxValue.  # noqa: E501

        :param min_date: The min_date of this MinMaxExtension.  # noqa: E501
        :type: date
        """

        self._min_date = min_date

    @property
    def max_date(self):
        """Gets the max_date of this MinMaxExtension.  # noqa: E501

        The maximum value for a Date range used in conjunction with and must be greater than minDate. The Date must be specified in one of the following formats according to RFC 3339 Section 5.6: \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", or \"EEE, dd MMM yyyy HH:mm:ss zzz\". If a timezone is not specified, the Date will be interpreted as UTC. This field cannot be combined with minValue or maxValue.  # noqa: E501

        :return: The max_date of this MinMaxExtension.  # noqa: E501
        :rtype: date
        """
        return self._max_date

    @max_date.setter
    def max_date(self, max_date):
        """Sets the max_date of this MinMaxExtension.

        The maximum value for a Date range used in conjunction with and must be greater than minDate. The Date must be specified in one of the following formats according to RFC 3339 Section 5.6: \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", or \"EEE, dd MMM yyyy HH:mm:ss zzz\". If a timezone is not specified, the Date will be interpreted as UTC. This field cannot be combined with minValue or maxValue.  # noqa: E501

        :param max_date: The max_date of this MinMaxExtension.  # noqa: E501
        :type: date
        """

        self._max_date = max_date

    @property
    def out_of_range_default_value(self):
        """Gets the out_of_range_default_value of this MinMaxExtension.  # noqa: E501

        The default replacement value for any value that is out-of-range.  # noqa: E501

        :return: The out_of_range_default_value of this MinMaxExtension.  # noqa: E501
        :rtype: str
        """
        return self._out_of_range_default_value

    @out_of_range_default_value.setter
    def out_of_range_default_value(self, out_of_range_default_value):
        """Sets the out_of_range_default_value of this MinMaxExtension.

        The default replacement value for any value that is out-of-range.  # noqa: E501

        :param out_of_range_default_value: The out_of_range_default_value of this MinMaxExtension.  # noqa: E501
        :type: str
        """
        if out_of_range_default_value is not None and len(out_of_range_default_value) > 255:
            raise ValueError("Invalid value for `out_of_range_default_value`, length must be less than or equal to `255`")  # noqa: E501

        self._out_of_range_default_value = out_of_range_default_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinMaxExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinMaxExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
