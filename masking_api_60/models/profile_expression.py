# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProfileExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_expression_id': 'int',
        'domain_name': 'str',
        'expression_name': 'str',
        'regular_expression': 'str',
        'created_by': 'str',
        'data_level_profiling': 'bool'
    }

    attribute_map = {
        'profile_expression_id': 'profileExpressionId',
        'domain_name': 'domainName',
        'expression_name': 'expressionName',
        'regular_expression': 'regularExpression',
        'created_by': 'createdBy',
        'data_level_profiling': 'dataLevelProfiling'
    }

    def __init__(self, profile_expression_id=None, domain_name=None, expression_name=None, regular_expression=None, created_by=None, data_level_profiling=False):  # noqa: E501
        """ProfileExpression - a model defined in Swagger"""  # noqa: E501

        self._profile_expression_id = None
        self._domain_name = None
        self._expression_name = None
        self._regular_expression = None
        self._created_by = None
        self._data_level_profiling = None
        self.discriminator = None

        if profile_expression_id is not None:
            self.profile_expression_id = profile_expression_id
        self.domain_name = domain_name
        self.expression_name = expression_name
        self.regular_expression = regular_expression
        if created_by is not None:
            self.created_by = created_by
        if data_level_profiling is not None:
            self.data_level_profiling = data_level_profiling

    @property
    def profile_expression_id(self):
        """Gets the profile_expression_id of this ProfileExpression.  # noqa: E501

        The ID number of the profile expression. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The profile_expression_id of this ProfileExpression.  # noqa: E501
        :rtype: int
        """
        return self._profile_expression_id

    @profile_expression_id.setter
    def profile_expression_id(self, profile_expression_id):
        """Sets the profile_expression_id of this ProfileExpression.

        The ID number of the profile expression. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param profile_expression_id: The profile_expression_id of this ProfileExpression.  # noqa: E501
        :type: int
        """

        self._profile_expression_id = profile_expression_id

    @property
    def domain_name(self):
        """Gets the domain_name of this ProfileExpression.  # noqa: E501

        The name of the domain that will be assigned to the column/field when a profile expression match is found during the execution of a profile job.  # noqa: E501

        :return: The domain_name of this ProfileExpression.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ProfileExpression.

        The name of the domain that will be assigned to the column/field when a profile expression match is found during the execution of a profile job.  # noqa: E501

        :param domain_name: The domain_name of this ProfileExpression.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501
        if domain_name is not None and len(domain_name) > 20:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `20`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def expression_name(self):
        """Gets the expression_name of this ProfileExpression.  # noqa: E501

        The name of the profile expression; it must be unique.  # noqa: E501

        :return: The expression_name of this ProfileExpression.  # noqa: E501
        :rtype: str
        """
        return self._expression_name

    @expression_name.setter
    def expression_name(self, expression_name):
        """Sets the expression_name of this ProfileExpression.

        The name of the profile expression; it must be unique.  # noqa: E501

        :param expression_name: The expression_name of this ProfileExpression.  # noqa: E501
        :type: str
        """
        if expression_name is None:
            raise ValueError("Invalid value for `expression_name`, must not be `None`")  # noqa: E501
        if expression_name is not None and len(expression_name) > 255:
            raise ValueError("Invalid value for `expression_name`, length must be less than or equal to `255`")  # noqa: E501

        self._expression_name = expression_name

    @property
    def regular_expression(self):
        """Gets the regular_expression of this ProfileExpression.  # noqa: E501

        The regularExpression that will be used to match against column/field names or data values during the execution of a profile job.  # noqa: E501

        :return: The regular_expression of this ProfileExpression.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this ProfileExpression.

        The regularExpression that will be used to match against column/field names or data values during the execution of a profile job.  # noqa: E501

        :param regular_expression: The regular_expression of this ProfileExpression.  # noqa: E501
        :type: str
        """
        if regular_expression is None:
            raise ValueError("Invalid value for `regular_expression`, must not be `None`")  # noqa: E501
        if regular_expression is not None and len(regular_expression) > 1000:
            raise ValueError("Invalid value for `regular_expression`, length must be less than or equal to `1000`")  # noqa: E501

        self._regular_expression = regular_expression

    @property
    def created_by(self):
        """Gets the created_by of this ProfileExpression.  # noqa: E501

        The user that created the profile expression. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The created_by of this ProfileExpression.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProfileExpression.

        The user that created the profile expression. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param created_by: The created_by of this ProfileExpression.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 255:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `255`")  # noqa: E501

        self._created_by = created_by

    @property
    def data_level_profiling(self):
        """Gets the data_level_profiling of this ProfileExpression.  # noqa: E501

        This field determines whether the profile expression will be targeted at the underlying data in a data source (e.g. row values in the database column / field values in the file), or whether the profile expression will be targeted at the schema of the data source (e.g. column names in a database table or field names in a file). Data-Level profiling consumes more memory than Column-Name-Level/Field-Name-Level profiling due to the fact that the profile expression must be checked against a larger number of data values (e.g. hundreds) than column/field names (i.e. one).  # noqa: E501

        :return: The data_level_profiling of this ProfileExpression.  # noqa: E501
        :rtype: bool
        """
        return self._data_level_profiling

    @data_level_profiling.setter
    def data_level_profiling(self, data_level_profiling):
        """Sets the data_level_profiling of this ProfileExpression.

        This field determines whether the profile expression will be targeted at the underlying data in a data source (e.g. row values in the database column / field values in the file), or whether the profile expression will be targeted at the schema of the data source (e.g. column names in a database table or field names in a file). Data-Level profiling consumes more memory than Column-Name-Level/Field-Name-Level profiling due to the fact that the profile expression must be checked against a larger number of data values (e.g. hundreds) than column/field names (i.e. one).  # noqa: E501

        :param data_level_profiling: The data_level_profiling of this ProfileExpression.  # noqa: E501
        :type: bool
        """

        self._data_level_profiling = data_level_profiling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileExpression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
