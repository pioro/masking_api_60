# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TableMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_metadata_id': 'int',
        'table_name': 'str',
        'ruleset_id': 'int',
        'custom_sql': 'str',
        'where_clause': 'str',
        'having_clause': 'str',
        'key_column': 'str'
    }

    attribute_map = {
        'table_metadata_id': 'tableMetadataId',
        'table_name': 'tableName',
        'ruleset_id': 'rulesetId',
        'custom_sql': 'customSql',
        'where_clause': 'whereClause',
        'having_clause': 'havingClause',
        'key_column': 'keyColumn'
    }

    def __init__(self, table_metadata_id=None, table_name=None, ruleset_id=None, custom_sql=None, where_clause=None, having_clause=None, key_column=None):  # noqa: E501
        """TableMetadata - a model defined in Swagger"""  # noqa: E501

        self._table_metadata_id = None
        self._table_name = None
        self._ruleset_id = None
        self._custom_sql = None
        self._where_clause = None
        self._having_clause = None
        self._key_column = None
        self.discriminator = None

        if table_metadata_id is not None:
            self.table_metadata_id = table_metadata_id
        self.table_name = table_name
        self.ruleset_id = ruleset_id
        if custom_sql is not None:
            self.custom_sql = custom_sql
        if where_clause is not None:
            self.where_clause = where_clause
        if having_clause is not None:
            self.having_clause = having_clause
        if key_column is not None:
            self.key_column = key_column

    @property
    def table_metadata_id(self):
        """Gets the table_metadata_id of this TableMetadata.  # noqa: E501

        The ID of the table metadata. This field is set by the Masking Engine.  # noqa: E501

        :return: The table_metadata_id of this TableMetadata.  # noqa: E501
        :rtype: int
        """
        return self._table_metadata_id

    @table_metadata_id.setter
    def table_metadata_id(self, table_metadata_id):
        """Sets the table_metadata_id of this TableMetadata.

        The ID of the table metadata. This field is set by the Masking Engine.  # noqa: E501

        :param table_metadata_id: The table_metadata_id of this TableMetadata.  # noqa: E501
        :type: int
        """

        self._table_metadata_id = table_metadata_id

    @property
    def table_name(self):
        """Gets the table_name of this TableMetadata.  # noqa: E501

        The name of the table metadata. This name must match the name of a table in the ruleset it is created on. This name must be unique for the given ruleset; in other words, the same table cannot be added to a ruleset more than once.  # noqa: E501

        :return: The table_name of this TableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this TableMetadata.

        The name of the table metadata. This name must match the name of a table in the ruleset it is created on. This name must be unique for the given ruleset; in other words, the same table cannot be added to a ruleset more than once.  # noqa: E501

        :param table_name: The table_name of this TableMetadata.  # noqa: E501
        :type: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501
        if table_name is not None and len(table_name) > 255:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `255`")  # noqa: E501

        self._table_name = table_name

    @property
    def ruleset_id(self):
        """Gets the ruleset_id of this TableMetadata.  # noqa: E501

        The ID of the ruleset to create the table metadata on.  # noqa: E501

        :return: The ruleset_id of this TableMetadata.  # noqa: E501
        :rtype: int
        """
        return self._ruleset_id

    @ruleset_id.setter
    def ruleset_id(self, ruleset_id):
        """Sets the ruleset_id of this TableMetadata.

        The ID of the ruleset to create the table metadata on.  # noqa: E501

        :param ruleset_id: The ruleset_id of this TableMetadata.  # noqa: E501
        :type: int
        """
        if ruleset_id is None:
            raise ValueError("Invalid value for `ruleset_id`, must not be `None`")  # noqa: E501

        self._ruleset_id = ruleset_id

    @property
    def custom_sql(self):
        """Gets the custom_sql of this TableMetadata.  # noqa: E501

        Custom SQL for the table.  # noqa: E501

        :return: The custom_sql of this TableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._custom_sql

    @custom_sql.setter
    def custom_sql(self, custom_sql):
        """Sets the custom_sql of this TableMetadata.

        Custom SQL for the table.  # noqa: E501

        :param custom_sql: The custom_sql of this TableMetadata.  # noqa: E501
        :type: str
        """

        self._custom_sql = custom_sql

    @property
    def where_clause(self):
        """Gets the where_clause of this TableMetadata.  # noqa: E501

        SQL where clause for the table.  # noqa: E501

        :return: The where_clause of this TableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._where_clause

    @where_clause.setter
    def where_clause(self, where_clause):
        """Sets the where_clause of this TableMetadata.

        SQL where clause for the table.  # noqa: E501

        :param where_clause: The where_clause of this TableMetadata.  # noqa: E501
        :type: str
        """
        if where_clause is not None and len(where_clause) > 5000:
            raise ValueError("Invalid value for `where_clause`, length must be less than or equal to `5000`")  # noqa: E501

        self._where_clause = where_clause

    @property
    def having_clause(self):
        """Gets the having_clause of this TableMetadata.  # noqa: E501

        SQL having clause for the table.  # noqa: E501

        :return: The having_clause of this TableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._having_clause

    @having_clause.setter
    def having_clause(self, having_clause):
        """Sets the having_clause of this TableMetadata.

        SQL having clause for the table.  # noqa: E501

        :param having_clause: The having_clause of this TableMetadata.  # noqa: E501
        :type: str
        """
        if having_clause is not None and len(having_clause) > 200:
            raise ValueError("Invalid value for `having_clause`, length must be less than or equal to `200`")  # noqa: E501

        self._having_clause = having_clause

    @property
    def key_column(self):
        """Gets the key_column of this TableMetadata.  # noqa: E501

        Key Column for the table.  # noqa: E501

        :return: The key_column of this TableMetadata.  # noqa: E501
        :rtype: str
        """
        return self._key_column

    @key_column.setter
    def key_column(self, key_column):
        """Sets the key_column of this TableMetadata.

        Key Column for the table.  # noqa: E501

        :param key_column: The key_column of this TableMetadata.  # noqa: E501
        :type: str
        """
        if key_column is not None and len(key_column) > 250:
            raise ValueError("Invalid value for `key_column`, length must be less than or equal to `250`")  # noqa: E501

        self._key_column = key_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
