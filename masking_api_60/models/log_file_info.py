# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LogFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_download_id': 'str',
        'file_number': 'int',
        'log_level': 'str'
    }

    attribute_map = {
        'file_download_id': 'fileDownloadId',
        'file_number': 'file-number',
        'log_level': 'logLevel'
    }

    def __init__(self, file_download_id=None, file_number=None, log_level=None):  # noqa: E501
        """LogFileInfo - a model defined in Swagger"""  # noqa: E501

        self._file_download_id = None
        self._file_number = None
        self._log_level = None
        self.discriminator = None

        if file_download_id is not None:
            self.file_download_id = file_download_id
        if file_number is not None:
            self.file_number = file_number
        if log_level is not None:
            self.log_level = log_level

    @property
    def file_download_id(self):
        """Gets the file_download_id of this LogFileInfo.  # noqa: E501

        The identifier to use when downloading the file via the /file-downloads endpoint.  # noqa: E501

        :return: The file_download_id of this LogFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_download_id

    @file_download_id.setter
    def file_download_id(self, file_download_id):
        """Sets the file_download_id of this LogFileInfo.

        The identifier to use when downloading the file via the /file-downloads endpoint.  # noqa: E501

        :param file_download_id: The file_download_id of this LogFileInfo.  # noqa: E501
        :type: str
        """

        self._file_download_id = file_download_id

    @property
    def file_number(self):
        """Gets the file_number of this LogFileInfo.  # noqa: E501

        The number of the file ordered from most recent to least recent. The 0th file represents the one that is currently being written to.  # noqa: E501

        :return: The file_number of this LogFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this LogFileInfo.

        The number of the file ordered from most recent to least recent. The 0th file represents the one that is currently being written to.  # noqa: E501

        :param file_number: The file_number of this LogFileInfo.  # noqa: E501
        :type: int
        """

        self._file_number = file_number

    @property
    def log_level(self):
        """Gets the log_level of this LogFileInfo.  # noqa: E501

        The log level of the log file.  # noqa: E501

        :return: The log_level of this LogFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this LogFileInfo.

        The log level of the log file.  # noqa: E501

        :param log_level: The log_level of this LogFileInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBUG", "ERROR", "INFO", "WARN"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogFileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
