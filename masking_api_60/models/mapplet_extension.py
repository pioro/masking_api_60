# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MappletExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mapplet_input': 'str',
        'mapplet_output': 'str',
        'file_reference_id': 'str',
        'file_download_id': 'str'
    }

    attribute_map = {
        'mapplet_input': 'mappletInput',
        'mapplet_output': 'mappletOutput',
        'file_reference_id': 'fileReferenceId',
        'file_download_id': 'fileDownloadId'
    }

    def __init__(self, mapplet_input=None, mapplet_output=None, file_reference_id=None, file_download_id=None):  # noqa: E501
        """MappletExtension - a model defined in Swagger"""  # noqa: E501

        self._mapplet_input = None
        self._mapplet_output = None
        self._file_reference_id = None
        self._file_download_id = None
        self.discriminator = None

        if mapplet_input is not None:
            self.mapplet_input = mapplet_input
        if mapplet_output is not None:
            self.mapplet_output = mapplet_output
        if file_reference_id is not None:
            self.file_reference_id = file_reference_id
        if file_download_id is not None:
            self.file_download_id = file_download_id

    @property
    def mapplet_input(self):
        """Gets the mapplet_input of this MappletExtension.  # noqa: E501

        The name of the input variable for the custom algorithm  # noqa: E501

        :return: The mapplet_input of this MappletExtension.  # noqa: E501
        :rtype: str
        """
        return self._mapplet_input

    @mapplet_input.setter
    def mapplet_input(self, mapplet_input):
        """Sets the mapplet_input of this MappletExtension.

        The name of the input variable for the custom algorithm  # noqa: E501

        :param mapplet_input: The mapplet_input of this MappletExtension.  # noqa: E501
        :type: str
        """
        if mapplet_input is not None and len(mapplet_input) > 500:
            raise ValueError("Invalid value for `mapplet_input`, length must be less than or equal to `500`")  # noqa: E501

        self._mapplet_input = mapplet_input

    @property
    def mapplet_output(self):
        """Gets the mapplet_output of this MappletExtension.  # noqa: E501

        The name of the output variable for the custom algorithm  # noqa: E501

        :return: The mapplet_output of this MappletExtension.  # noqa: E501
        :rtype: str
        """
        return self._mapplet_output

    @mapplet_output.setter
    def mapplet_output(self, mapplet_output):
        """Sets the mapplet_output of this MappletExtension.

        The name of the output variable for the custom algorithm  # noqa: E501

        :param mapplet_output: The mapplet_output of this MappletExtension.  # noqa: E501
        :type: str
        """
        if mapplet_output is not None and len(mapplet_output) > 500:
            raise ValueError("Invalid value for `mapplet_output`, length must be less than or equal to `500`")  # noqa: E501

        self._mapplet_output = mapplet_output

    @property
    def file_reference_id(self):
        """Gets the file_reference_id of this MappletExtension.  # noqa: E501

        The reference UUID value returned from the endpoint for uploading files to the Masking Engine.  # noqa: E501

        :return: The file_reference_id of this MappletExtension.  # noqa: E501
        :rtype: str
        """
        return self._file_reference_id

    @file_reference_id.setter
    def file_reference_id(self, file_reference_id):
        """Sets the file_reference_id of this MappletExtension.

        The reference UUID value returned from the endpoint for uploading files to the Masking Engine.  # noqa: E501

        :param file_reference_id: The file_reference_id of this MappletExtension.  # noqa: E501
        :type: str
        """
        if file_reference_id is not None and len(file_reference_id) > 36:
            raise ValueError("Invalid value for `file_reference_id`, length must be less than or equal to `36`")  # noqa: E501

        self._file_reference_id = file_reference_id

    @property
    def file_download_id(self):
        """Gets the file_download_id of this MappletExtension.  # noqa: E501

        This value is returned on GET. It can be fed into the file-downloads endpoint.  # noqa: E501

        :return: The file_download_id of this MappletExtension.  # noqa: E501
        :rtype: str
        """
        return self._file_download_id

    @file_download_id.setter
    def file_download_id(self, file_download_id):
        """Sets the file_download_id of this MappletExtension.

        This value is returned on GET. It can be fed into the file-downloads endpoint.  # noqa: E501

        :param file_download_id: The file_download_id of this MappletExtension.  # noqa: E501
        :type: str
        """

        self._file_download_id = file_download_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MappletExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MappletExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
