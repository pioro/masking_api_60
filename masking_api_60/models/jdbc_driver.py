# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JdbcDriver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jdbc_driver_id': 'int',
        'driver_name': 'str',
        'driver_class_name': 'str',
        'description': 'str',
        'version': 'str',
        'uploaded_by': 'str',
        'upload_date': 'datetime',
        'checksum': 'str',
        'built_in': 'bool',
        'logger_installed': 'bool',
        'file_reference_id': 'str'
    }

    attribute_map = {
        'jdbc_driver_id': 'jdbcDriverId',
        'driver_name': 'driverName',
        'driver_class_name': 'driverClassName',
        'description': 'description',
        'version': 'version',
        'uploaded_by': 'uploadedBy',
        'upload_date': 'uploadDate',
        'checksum': 'checksum',
        'built_in': 'builtIn',
        'logger_installed': 'loggerInstalled',
        'file_reference_id': 'fileReferenceId'
    }

    def __init__(self, jdbc_driver_id=None, driver_name=None, driver_class_name=None, description=None, version=None, uploaded_by=None, upload_date=None, checksum=None, built_in=None, logger_installed=None, file_reference_id=None):  # noqa: E501
        """JdbcDriver - a model defined in Swagger"""  # noqa: E501

        self._jdbc_driver_id = None
        self._driver_name = None
        self._driver_class_name = None
        self._description = None
        self._version = None
        self._uploaded_by = None
        self._upload_date = None
        self._checksum = None
        self._built_in = None
        self._logger_installed = None
        self._file_reference_id = None
        self.discriminator = None

        if jdbc_driver_id is not None:
            self.jdbc_driver_id = jdbc_driver_id
        self.driver_name = driver_name
        self.driver_class_name = driver_class_name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by
        if upload_date is not None:
            self.upload_date = upload_date
        if checksum is not None:
            self.checksum = checksum
        if built_in is not None:
            self.built_in = built_in
        if logger_installed is not None:
            self.logger_installed = logger_installed
        if file_reference_id is not None:
            self.file_reference_id = file_reference_id

    @property
    def jdbc_driver_id(self):
        """Gets the jdbc_driver_id of this JdbcDriver.  # noqa: E501

        The ID number of the driver. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The jdbc_driver_id of this JdbcDriver.  # noqa: E501
        :rtype: int
        """
        return self._jdbc_driver_id

    @jdbc_driver_id.setter
    def jdbc_driver_id(self, jdbc_driver_id):
        """Sets the jdbc_driver_id of this JdbcDriver.

        The ID number of the driver. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param jdbc_driver_id: The jdbc_driver_id of this JdbcDriver.  # noqa: E501
        :type: int
        """

        self._jdbc_driver_id = jdbc_driver_id

    @property
    def driver_name(self):
        """Gets the driver_name of this JdbcDriver.  # noqa: E501

        The name of the driver.  # noqa: E501

        :return: The driver_name of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this JdbcDriver.

        The name of the driver.  # noqa: E501

        :param driver_name: The driver_name of this JdbcDriver.  # noqa: E501
        :type: str
        """
        if driver_name is None:
            raise ValueError("Invalid value for `driver_name`, must not be `None`")  # noqa: E501
        if driver_name is not None and len(driver_name) > 255:
            raise ValueError("Invalid value for `driver_name`, length must be less than or equal to `255`")  # noqa: E501

        self._driver_name = driver_name

    @property
    def driver_class_name(self):
        """Gets the driver_class_name of this JdbcDriver.  # noqa: E501

        The name of the class to use.  # noqa: E501

        :return: The driver_class_name of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._driver_class_name

    @driver_class_name.setter
    def driver_class_name(self, driver_class_name):
        """Sets the driver_class_name of this JdbcDriver.

        The name of the class to use.  # noqa: E501

        :param driver_class_name: The driver_class_name of this JdbcDriver.  # noqa: E501
        :type: str
        """
        if driver_class_name is None:
            raise ValueError("Invalid value for `driver_class_name`, must not be `None`")  # noqa: E501
        if driver_class_name is not None and len(driver_class_name) > 255:
            raise ValueError("Invalid value for `driver_class_name`, length must be less than or equal to `255`")  # noqa: E501

        self._driver_class_name = driver_class_name

    @property
    def description(self):
        """Gets the description of this JdbcDriver.  # noqa: E501

        A description of the driver.  # noqa: E501

        :return: The description of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JdbcDriver.

        A description of the driver.  # noqa: E501

        :param description: The description of this JdbcDriver.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def version(self):
        """Gets the version of this JdbcDriver.  # noqa: E501

        The version of the driver.  # noqa: E501

        :return: The version of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JdbcDriver.

        The version of the driver.  # noqa: E501

        :param version: The version of this JdbcDriver.  # noqa: E501
        :type: str
        """
        if version is not None and len(version) > 255:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `255`")  # noqa: E501

        self._version = version

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this JdbcDriver.  # noqa: E501

        The name of the user that uploaded the driver  # noqa: E501

        :return: The uploaded_by of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this JdbcDriver.

        The name of the user that uploaded the driver  # noqa: E501

        :param uploaded_by: The uploaded_by of this JdbcDriver.  # noqa: E501
        :type: str
        """
        if uploaded_by is not None and len(uploaded_by) > 255:
            raise ValueError("Invalid value for `uploaded_by`, length must be less than or equal to `255`")  # noqa: E501

        self._uploaded_by = uploaded_by

    @property
    def upload_date(self):
        """Gets the upload_date of this JdbcDriver.  # noqa: E501

        The date the driver was updated.  # noqa: E501

        :return: The upload_date of this JdbcDriver.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this JdbcDriver.

        The date the driver was updated.  # noqa: E501

        :param upload_date: The upload_date of this JdbcDriver.  # noqa: E501
        :type: datetime
        """

        self._upload_date = upload_date

    @property
    def checksum(self):
        """Gets the checksum of this JdbcDriver.  # noqa: E501

        The md5 checksum of the uploaded driver.  # noqa: E501

        :return: The checksum of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this JdbcDriver.

        The md5 checksum of the uploaded driver.  # noqa: E501

        :param checksum: The checksum of this JdbcDriver.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def built_in(self):
        """Gets the built_in of this JdbcDriver.  # noqa: E501

        Whether this is a JDBC driver that is supported natively by the engine.  # noqa: E501

        :return: The built_in of this JdbcDriver.  # noqa: E501
        :rtype: bool
        """
        return self._built_in

    @built_in.setter
    def built_in(self, built_in):
        """Sets the built_in of this JdbcDriver.

        Whether this is a JDBC driver that is supported natively by the engine.  # noqa: E501

        :param built_in: The built_in of this JdbcDriver.  # noqa: E501
        :type: bool
        """

        self._built_in = built_in

    @property
    def logger_installed(self):
        """Gets the logger_installed of this JdbcDriver.  # noqa: E501

        Whether a logger is successfully installed.  # noqa: E501

        :return: The logger_installed of this JdbcDriver.  # noqa: E501
        :rtype: bool
        """
        return self._logger_installed

    @logger_installed.setter
    def logger_installed(self, logger_installed):
        """Sets the logger_installed of this JdbcDriver.

        Whether a logger is successfully installed.  # noqa: E501

        :param logger_installed: The logger_installed of this JdbcDriver.  # noqa: E501
        :type: bool
        """

        self._logger_installed = logger_installed

    @property
    def file_reference_id(self):
        """Gets the file_reference_id of this JdbcDriver.  # noqa: E501

        The file references ID of the uploaded zip file  # noqa: E501

        :return: The file_reference_id of this JdbcDriver.  # noqa: E501
        :rtype: str
        """
        return self._file_reference_id

    @file_reference_id.setter
    def file_reference_id(self, file_reference_id):
        """Sets the file_reference_id of this JdbcDriver.

        The file references ID of the uploaded zip file  # noqa: E501

        :param file_reference_id: The file_reference_id of this JdbcDriver.  # noqa: E501
        :type: str
        """

        self._file_reference_id = file_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JdbcDriver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JdbcDriver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
