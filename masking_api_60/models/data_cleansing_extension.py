# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataCleansingExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_reference_id': 'str',
        'delimiter': 'str'
    }

    attribute_map = {
        'file_reference_id': 'fileReferenceId',
        'delimiter': 'delimiter'
    }

    def __init__(self, file_reference_id=None, delimiter='='):  # noqa: E501
        """DataCleansingExtension - a model defined in Swagger"""  # noqa: E501

        self._file_reference_id = None
        self._delimiter = None
        self.discriminator = None

        if file_reference_id is not None:
            self.file_reference_id = file_reference_id
        if delimiter is not None:
            self.delimiter = delimiter

    @property
    def file_reference_id(self):
        """Gets the file_reference_id of this DataCleansingExtension.  # noqa: E501

        The reference URI value returned from the endpoint for uploading files to the Masking Engine. The file should contain a newline separated list of {value, replacement} pairs separated by the delimiter. No extraneous whitespace should be present.  # noqa: E501

        :return: The file_reference_id of this DataCleansingExtension.  # noqa: E501
        :rtype: str
        """
        return self._file_reference_id

    @file_reference_id.setter
    def file_reference_id(self, file_reference_id):
        """Sets the file_reference_id of this DataCleansingExtension.

        The reference URI value returned from the endpoint for uploading files to the Masking Engine. The file should contain a newline separated list of {value, replacement} pairs separated by the delimiter. No extraneous whitespace should be present.  # noqa: E501

        :param file_reference_id: The file_reference_id of this DataCleansingExtension.  # noqa: E501
        :type: str
        """

        self._file_reference_id = file_reference_id

    @property
    def delimiter(self):
        """Gets the delimiter of this DataCleansingExtension.  # noqa: E501

        The delimiter string used to separate {value, replacement} pairs in the uploaded file  # noqa: E501

        :return: The delimiter of this DataCleansingExtension.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this DataCleansingExtension.

        The delimiter string used to separate {value, replacement} pairs in the uploaded file  # noqa: E501

        :param delimiter: The delimiter of this DataCleansingExtension.  # noqa: E501
        :type: str
        """
        if delimiter is not None and len(delimiter) > 50:
            raise ValueError("Invalid value for `delimiter`, length must be less than or equal to `50`")  # noqa: E501
        if delimiter is not None and len(delimiter) < 1:
            raise ValueError("Invalid value for `delimiter`, length must be greater than or equal to `1`")  # noqa: E501

        self._delimiter = delimiter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCleansingExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCleansingExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
