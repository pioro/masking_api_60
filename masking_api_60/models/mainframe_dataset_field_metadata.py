# coding: utf-8

"""
    Masking API

    Schema for the Masking Engine API  # noqa: E501

    OpenAPI spec version: 5.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MainframeDatasetFieldMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mainframe_dataset_field_metadata_id': 'int',
        'mainframe_dataset_format_id': 'int',
        'field_name': 'str',
        'algorithm_name': 'str',
        'domain_name': 'str',
        'date_format': 'str',
        'is_masked': 'bool',
        'is_profiler_writable': 'bool'
    }

    attribute_map = {
        'mainframe_dataset_field_metadata_id': 'mainframeDatasetFieldMetadataId',
        'mainframe_dataset_format_id': 'mainframeDatasetFormatId',
        'field_name': 'fieldName',
        'algorithm_name': 'algorithmName',
        'domain_name': 'domainName',
        'date_format': 'dateFormat',
        'is_masked': 'isMasked',
        'is_profiler_writable': 'isProfilerWritable'
    }

    def __init__(self, mainframe_dataset_field_metadata_id=None, mainframe_dataset_format_id=None, field_name=None, algorithm_name=None, domain_name=None, date_format=None, is_masked=None, is_profiler_writable=False):  # noqa: E501
        """MainframeDatasetFieldMetadata - a model defined in Swagger"""  # noqa: E501

        self._mainframe_dataset_field_metadata_id = None
        self._mainframe_dataset_format_id = None
        self._field_name = None
        self._algorithm_name = None
        self._domain_name = None
        self._date_format = None
        self._is_masked = None
        self._is_profiler_writable = None
        self.discriminator = None

        if mainframe_dataset_field_metadata_id is not None:
            self.mainframe_dataset_field_metadata_id = mainframe_dataset_field_metadata_id
        if mainframe_dataset_format_id is not None:
            self.mainframe_dataset_format_id = mainframe_dataset_format_id
        if field_name is not None:
            self.field_name = field_name
        if algorithm_name is not None:
            self.algorithm_name = algorithm_name
        if domain_name is not None:
            self.domain_name = domain_name
        if date_format is not None:
            self.date_format = date_format
        if is_masked is not None:
            self.is_masked = is_masked
        if is_profiler_writable is not None:
            self.is_profiler_writable = is_profiler_writable

    @property
    def mainframe_dataset_field_metadata_id(self):
        """Gets the mainframe_dataset_field_metadata_id of this MainframeDatasetFieldMetadata.  # noqa: E501

        The ID number of the Mainframe Dataset field metadata. This field is auto-generated by the Masking Engine.  # noqa: E501

        :return: The mainframe_dataset_field_metadata_id of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_field_metadata_id

    @mainframe_dataset_field_metadata_id.setter
    def mainframe_dataset_field_metadata_id(self, mainframe_dataset_field_metadata_id):
        """Sets the mainframe_dataset_field_metadata_id of this MainframeDatasetFieldMetadata.

        The ID number of the Mainframe Dataset field metadata. This field is auto-generated by the Masking Engine.  # noqa: E501

        :param mainframe_dataset_field_metadata_id: The mainframe_dataset_field_metadata_id of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: int
        """

        self._mainframe_dataset_field_metadata_id = mainframe_dataset_field_metadata_id

    @property
    def mainframe_dataset_format_id(self):
        """Gets the mainframe_dataset_format_id of this MainframeDatasetFieldMetadata.  # noqa: E501

        The ID number of the Mainframe Dataset format that defines this Mainframe Dataset field.  # noqa: E501

        :return: The mainframe_dataset_format_id of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: int
        """
        return self._mainframe_dataset_format_id

    @mainframe_dataset_format_id.setter
    def mainframe_dataset_format_id(self, mainframe_dataset_format_id):
        """Sets the mainframe_dataset_format_id of this MainframeDatasetFieldMetadata.

        The ID number of the Mainframe Dataset format that defines this Mainframe Dataset field.  # noqa: E501

        :param mainframe_dataset_format_id: The mainframe_dataset_format_id of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: int
        """

        self._mainframe_dataset_format_id = mainframe_dataset_format_id

    @property
    def field_name(self):
        """Gets the field_name of this MainframeDatasetFieldMetadata.  # noqa: E501

        The name of the Mainframe Dataset field, as determined by the associated Mainframe Dataset format.  # noqa: E501

        :return: The field_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this MainframeDatasetFieldMetadata.

        The name of the Mainframe Dataset field, as determined by the associated Mainframe Dataset format.  # noqa: E501

        :param field_name: The field_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: str
        """
        if field_name is not None and len(field_name) > 100:
            raise ValueError("Invalid value for `field_name`, length must be less than or equal to `100`")  # noqa: E501

        self._field_name = field_name

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this MainframeDatasetFieldMetadata.  # noqa: E501

        The name of the algorithm assigned to this Mainframe Dataset field. Mainframe Dataset fields that are unmasked should have this property unset, in addition to having 'domainName' unset. If this field is set, then the 'domainName' must also be specified.  # noqa: E501

        :return: The algorithm_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this MainframeDatasetFieldMetadata.

        The name of the algorithm assigned to this Mainframe Dataset field. Mainframe Dataset fields that are unmasked should have this property unset, in addition to having 'domainName' unset. If this field is set, then the 'domainName' must also be specified.  # noqa: E501

        :param algorithm_name: The algorithm_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: str
        """
        if algorithm_name is not None and len(algorithm_name) > 500:
            raise ValueError("Invalid value for `algorithm_name`, length must be less than or equal to `500`")  # noqa: E501

        self._algorithm_name = algorithm_name

    @property
    def domain_name(self):
        """Gets the domain_name of this MainframeDatasetFieldMetadata.  # noqa: E501

        The name of the domain assigned to this Mainframe Dataset field. Mainframe Dataset fields that are left unmasked should have this property unset. If the 'domainName' is set, but the 'algorithmName' is unset, then the default algorithm corresponding to the 'domainName' will be used.  # noqa: E501

        :return: The domain_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this MainframeDatasetFieldMetadata.

        The name of the domain assigned to this Mainframe Dataset field. Mainframe Dataset fields that are left unmasked should have this property unset. If the 'domainName' is set, but the 'algorithmName' is unset, then the default algorithm corresponding to the 'domainName' will be used.  # noqa: E501

        :param domain_name: The domain_name of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: str
        """
        if domain_name is not None and len(domain_name) > 20:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `20`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def date_format(self):
        """Gets the date_format of this MainframeDatasetFieldMetadata.  # noqa: E501

        The date format of the date assigned to this Mainframe Dataset field.  # noqa: E501

        :return: The date_format of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this MainframeDatasetFieldMetadata.

        The date format of the date assigned to this Mainframe Dataset field.  # noqa: E501

        :param date_format: The date_format of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: str
        """
        if date_format is not None and len(date_format) > 50:
            raise ValueError("Invalid value for `date_format`, length must be less than or equal to `50`")  # noqa: E501

        self._date_format = date_format

    @property
    def is_masked(self):
        """Gets the is_masked of this MainframeDatasetFieldMetadata.  # noqa: E501

        This field indicates whether or not a Mainframe Dataset field is being masked. This field is assigned by the Masking Engine to true or false based on whether the Mainframe Dataset field is assigned an algorithm and domain.  # noqa: E501

        :return: The is_masked of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_masked

    @is_masked.setter
    def is_masked(self, is_masked):
        """Sets the is_masked of this MainframeDatasetFieldMetadata.

        This field indicates whether or not a Mainframe Dataset field is being masked. This field is assigned by the Masking Engine to true or false based on whether the Mainframe Dataset field is assigned an algorithm and domain.  # noqa: E501

        :param is_masked: The is_masked of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: bool
        """

        self._is_masked = is_masked

    @property
    def is_profiler_writable(self):
        """Gets the is_profiler_writable of this MainframeDatasetFieldMetadata.  # noqa: E501

        This field indicates whether or not a Mainframe Dataset field (e.g. algorithm or domain assignment) may be modified during the execution of a profile job when there is a profiling match.  # noqa: E501

        :return: The is_profiler_writable of this MainframeDatasetFieldMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_profiler_writable

    @is_profiler_writable.setter
    def is_profiler_writable(self, is_profiler_writable):
        """Sets the is_profiler_writable of this MainframeDatasetFieldMetadata.

        This field indicates whether or not a Mainframe Dataset field (e.g. algorithm or domain assignment) may be modified during the execution of a profile job when there is a profiling match.  # noqa: E501

        :param is_profiler_writable: The is_profiler_writable of this MainframeDatasetFieldMetadata.  # noqa: E501
        :type: bool
        """

        self._is_profiler_writable = is_profiler_writable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainframeDatasetFieldMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainframeDatasetFieldMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
